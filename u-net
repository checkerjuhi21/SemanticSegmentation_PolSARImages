{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"u-net","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMJ3Z+hxt95HpdxrIMXEFL3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"lcIdcXLmul6M"},"source":["**STEP 1**"]},{"cell_type":"code","metadata":{"id":"TY6RiGrMgWiw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608189533763,"user_tz":-330,"elapsed":120124,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"96203263-2697-4824-fa22-700e17286842"},"source":["!pip install tensorflow==2.2.0"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting tensorflow==2.2.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/3d/be/679ce5254a8c8d07470efb4a4c00345fae91f766e64f1c2aece8796d7218/tensorflow-2.2.0-cp36-cp36m-manylinux2010_x86_64.whl (516.2MB)\n","\u001b[K     |████████████████████████████████| 516.2MB 33kB/s \n","\u001b[?25hRequirement already satisfied: wrapt>=1.11.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (1.12.1)\n","Collecting tensorboard<2.3.0,>=2.2.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1d/74/0a6fcb206dcc72a6da9a62dd81784bfdbff5fedb099982861dc2219014fb/tensorboard-2.2.2-py3-none-any.whl (3.0MB)\n","\u001b[K     |████████████████████████████████| 3.0MB 63kB/s \n","\u001b[?25hRequirement already satisfied: astunparse==1.6.3 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (1.6.3)\n","Collecting tensorflow-estimator<2.3.0,>=2.2.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a4/f5/926ae53d6a226ec0fda5208e0e581cffed895ccc89e36ba76a8e60895b78/tensorflow_estimator-2.2.0-py2.py3-none-any.whl (454kB)\n","\u001b[K     |████████████████████████████████| 460kB 49.2MB/s \n","\u001b[?25hRequirement already satisfied: wheel>=0.26; python_version >= \"3\" in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (0.36.1)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (1.1.0)\n","Requirement already satisfied: absl-py>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (0.10.0)\n","Requirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (1.34.0)\n","Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (1.18.5)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (3.3.0)\n","Requirement already satisfied: scipy==1.4.1; python_version >= \"3\" in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (1.4.1)\n","Requirement already satisfied: keras-preprocessing>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (1.1.2)\n","Requirement already satisfied: protobuf>=3.8.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (3.12.4)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (1.15.0)\n","Requirement already satisfied: h5py<2.11.0,>=2.10.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (2.10.0)\n","Requirement already satisfied: gast==0.3.3 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (0.3.3)\n","Requirement already satisfied: google-pasta>=0.1.8 in /usr/local/lib/python3.6/dist-packages (from tensorflow==2.2.0) (0.2.0)\n","Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (50.3.2)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (0.4.2)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (2.23.0)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (1.7.0)\n","Requirement already satisfied: google-auth<2,>=1.6.3 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (1.17.2)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (1.0.1)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (3.3.3)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (1.3.0)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (2020.12.5)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (2.10)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (0.2.8)\n","Requirement already satisfied: rsa<5,>=3.1.4; python_version >= \"3\" in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (4.6)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (4.1.1)\n","Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.6/dist-packages (from markdown>=2.6.8->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (3.1.1)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (3.1.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.6/dist-packages (from pyasn1-modules>=0.2.1->google-auth<2,>=1.6.3->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (0.4.8)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.6/dist-packages (from importlib-metadata; python_version < \"3.8\"->markdown>=2.6.8->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (3.4.0)\n","Installing collected packages: tensorboard, tensorflow-estimator, tensorflow\n","  Found existing installation: tensorboard 2.3.0\n","    Uninstalling tensorboard-2.3.0:\n","      Successfully uninstalled tensorboard-2.3.0\n","  Found existing installation: tensorflow-estimator 2.3.0\n","    Uninstalling tensorflow-estimator-2.3.0:\n","      Successfully uninstalled tensorflow-estimator-2.3.0\n","  Found existing installation: tensorflow 2.3.0\n","    Uninstalling tensorflow-2.3.0:\n","      Successfully uninstalled tensorflow-2.3.0\n","Successfully installed tensorboard-2.2.2 tensorflow-2.2.0 tensorflow-estimator-2.2.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nFMI3OLTuppJ"},"source":["**STEP 2**"]},{"cell_type":"code","metadata":{"id":"eOzFacKwggIB","executionInfo":{"status":"ok","timestamp":1611295985435,"user_tz":-330,"elapsed":1095,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["def import_libraries():\n","  from google.colab import drive\n","  import os\n","  drive.mount('/content/gdrive')\n","  os.chdir('/content/gdrive/My Drive/good_gTruth/Jpeg_0.5')\n","  #!pip install git+https://github.com/qubvel/segmentation_models"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hVhfbETuutLE"},"source":["**STEP 3**"]},{"cell_type":"code","metadata":{"id":"46KZsgtuhVAa","executionInfo":{"status":"ok","timestamp":1611296044760,"user_tz":-330,"elapsed":1812,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["def initialize_elements():\n","  from PIL import Image\n","  import os\n","  import numpy as np \n","  #original = os.listdir('Touzi_jp2')\n","  #print(original) #['Seven_Pv.jp2', 'Seven_Ps.jp2', 'Seven_Pod.jp2', 'Seven_Pmd.jp2', 'Seven_Ph.jp2', 'Seven_Pd.jp2', 'Seven_Pcd.jp2']\n","  #original = ['TSVM_alpha_s1.jp2', 'TSVM_alpha_s2.jp2', 'TSVM_phi_s1.jp2', 'TSVM_phi_s2.jp2', 'TSVM_psi1.jp2', 'TSVM_psi2.jp2', 'TSVM_tau_m1.jp2', 'TSVM_tau_m2.jp2']\n","  original = ['T11.jpg', 'T12_imag.jpg', 'T12_real.jpg', 'T13_imag.jpg', 'T13_real.jpg', 'T22.jpg', 'T23_imag.jpg', 'T23_real.jpg', 'T33.jpg']\n","  #original = ['Seven_Pv.jp2', 'Seven_Ps.jp2', 'Seven_Pod.jp2', 'Seven_Pmd.jp2', 'Seven_Ph.jp2', 'Seven_Pd.jp2', 'Seven_Pcd.jp2']\n","  X_7B = np.zeros((1554,1228, 9), dtype = np.float32)\n","  i=0\n","\n","  #stacking the 7/4/9 layers\n","  for band in original:\n","    path = os.path.join('/content/gdrive/My Drive/good_gTruth/Jpeg_0.5/', band)\n","    B = Image.open(path)\n","    X_7B[:,:,i]=B\n","    i=i+1\n","\n","  print(X_7B.size) #13358184\n","  print(X_7B[0][0].size) #7\n","\n","  #Taking the masking as an input\n","  M_7B = np.zeros((1554,1228, 1), dtype = np.float32)\n","  path = os.path.join('/content/gdrive/My Drive/good_gTruth/', 'Label_1.png')\n","  B = Image.open(path)\n","  M_7B[:,:,0]=B\n","\n","  import numpy as np\n","  import os\n","  from PIL import Image\n","  from keras.utils import to_categorical\n","  mask = np.zeros((1554,1228), dtype = np.float32)\n","  M_7B_one = np.zeros((1554,1228, 6), dtype = np.float32)\n","  path = os.path.join('/content/gdrive/My Drive/good_gTruth/', 'Label_1.png')\n","  B = Image.open(path)\n","  encoded = to_categorical(B)\n","  #print(encoded)\n","  M_7B_one[:,:,:]=encoded\n","\n","  print(M_7B.size) #1908312\n","  print(M_7B[0][0].size) #1\n","  print(M_7B_one.size) #\n","\n","  #Creating overlapping tiles \n","  X = np.zeros((250, 224, 224, 9), dtype = np.float32)\n","  i=0\n","  pixel_row=0\n","  counter=1\n","  while pixel_row < 1329: \n","      pixel_col=0\n","      while pixel_col < 1005:\n","          pic_part = X_7B[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          X[i] = pic_part\n","          i = i+1\n","          pixel_col=pixel_col+111\n","          counter = counter+1\n","      pixel_row=pixel_row+55\n","\n","  print(X.shape) #(250, 224, 224, 7)\n","\n","  #creating tiles for masking as well\n","\n","  Y = np.zeros((250, 224, 224, 1), dtype = np.float32)\n","  Y_one = np.zeros((250, 224, 224, 6), dtype = np.float32)\n","  i=0\n","  pixel_row=0\n","  counter=1\n","  while pixel_row < 1329: \n","      pixel_col=0\n","      while pixel_col < 1005:\n","          pic_part = M_7B[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          Y[i] = pic_part\n","          Y_one[i] = M_7B_one[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          i = i+1\n","          pixel_col=pixel_col+111\n","          counter = counter+1\n","      pixel_row=pixel_row+55\n","\n","  print(Y.shape) #(250, 224, 224, 1)\n","  print(Y_one.shape) #\n","\n","  from sklearn.model_selection import train_test_split\n","\n","  X_tv, X_test, Y_tv, Y_test = train_test_split(X,Y_one,test_size=0.2,train_size=0.8)\n","  X_train, X_val, Y_train, Y_val = train_test_split(X_tv,Y_tv,test_size = 0.20,train_size =0.80)  \n","\n","  print(X_train.shape)\n","  print(X_val.shape)\n","  print(X_test.shape)\n","\n","  #(160, 224, 224, 7)\n","  #(40, 224, 224, 7)\n","  #(50, 224, 224, 7)\n","  \n","  print(Y_train.shape)\n","  print(Y_val.shape)\n","  print(Y_test.shape)\n","\n","  #(160, 224, 224, 1)\n","  #(40, 224, 224, 1)\n","  #(50, 224, 224, 1)\n","\n","  return X_train, X_val, X_test, Y_train, Y_val, Y_test"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"O6MiUz8s7sDk"},"source":["**IGNORE Next 2 STEP**"]},{"cell_type":"code","metadata":{"id":"ndatTudwjYIx"},"source":["def u_net_model(X_train, X_val, Y_train, Y_val):\n","  from segmentation_models import get_preprocessing\n","  from segmentation_models.losses import bce_jaccard_loss\n","  from segmentation_models.losses import CategoricalCELoss\n","  from segmentation_models.metrics import iou_score\n","  from segmentation_models.metrics import FScore\n","  from segmentation_models.metrics import Precision\n","  from segmentation_models.metrics import Recall\n","  BACKBONE = 'resnet34'\n","  preprocess_input = get_preprocessing(BACKBONE)\n","\n","  X_train = preprocess_input(X_train)\n","  X_val = preprocess_input(X_val)\n","  N = X_train.shape[-1]\n","  loss = CategoricalCELoss()\n","  metric = FScore()\n","  p = Precision()\n","  r = Recall()\n","\n","  from segmentation_models import Unet\n","\n","  unet_model = Unet('resnet34', classes=5, activation='softmax')\n","  unet_model = Unet(backbone_name='resnet34', encoder_weights=None, input_shape=(224, 224, N))\n","  unet_model.compile('Adam', loss=loss, metrics=['accuracy',metric, p, r, iou_score])\n","\n","  history = unet_model.fit(\n","      x=X_train,\n","      y=Y_train,\n","      batch_size=16,\n","      epochs=100,\n","      validation_data=(X_val, Y_val),\n","  )\n","\n","  return unet_model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"I5Evdp5_hYJz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608190921606,"user_tz":-330,"elapsed":7171,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"444548a0-dc2d-4520-bce4-821f841567d7"},"source":["#import_libraries()\n","X_train, X_val, X_test, Y_train, Y_val, Y_test = initialize_elements()\n","#model = u_net_model(X_train, X_val, Y_train, Y_val)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["13358184\n","7\n","1908312\n","1\n","11449872\n","(250, 224, 224, 7)\n","(250, 224, 224, 1)\n","(250, 224, 224, 6)\n","(160, 224, 224, 7)\n","(40, 224, 224, 7)\n","(50, 224, 224, 7)\n","(160, 224, 224, 6)\n","(40, 224, 224, 6)\n","(50, 224, 224, 6)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2lH_kbRWnBff"},"source":["**STEP 4**MAIN U-NET MODEL"]},{"cell_type":"code","metadata":{"id":"-mRr-r7BxjCp","executionInfo":{"status":"ok","timestamp":1611296049297,"user_tz":-330,"elapsed":2525,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["from keras.models import Model\n","from keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D, concatenate, Conv2DTranspose, BatchNormalization, Dropout\n","from keras.optimizers import Adam\n","from keras.utils import plot_model\n","from keras import backend as K\n","\n","\n","def unet_model(n_classes=6, im_sz=224, n_channels=9, n_filters_start=32, growth_factor=2, upconv=True,\n","               class_weights=[1.3453, 1.0000, 1.1585, 0.4894, 0.5044, 0.01]):\n","    droprate=0.25\n","    n_filters = n_filters_start\n","    inputs = Input((im_sz, im_sz, n_channels))\n","    #inputs = BatchNormalization()(inputs)\n","    conv1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(inputs)\n","    conv1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv1)\n","    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)\n","    #pool1 = Dropout(droprate)(pool1)\n","\n","    n_filters *= growth_factor\n","    pool1 = BatchNormalization()(pool1)\n","    conv2 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool1)\n","    conv2 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv2)\n","    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)\n","    pool2 = Dropout(droprate)(pool2)\n","\n","    n_filters *= growth_factor\n","    pool2 = BatchNormalization()(pool2)\n","    conv3 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool2)\n","    conv3 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv3)\n","    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)\n","    pool3 = Dropout(droprate)(pool3)\n","\n","    n_filters *= growth_factor\n","    pool3 = BatchNormalization()(pool3)\n","    conv4_0 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool3)\n","    conv4_0 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv4_0)\n","    pool4_1 = MaxPooling2D(pool_size=(2, 2))(conv4_0)\n","    pool4_1 = Dropout(droprate)(pool4_1)\n","\n","    n_filters *= growth_factor\n","    pool4_1 = BatchNormalization()(pool4_1)\n","    conv4_1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool4_1)\n","    conv4_1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv4_1)\n","    pool4_2 = MaxPooling2D(pool_size=(2, 2))(conv4_1)\n","    pool4_2 = Dropout(droprate)(pool4_2)\n","\n","    n_filters *= growth_factor\n","    conv5 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool4_2)\n","    conv5 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv5)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up6_1 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv5), conv4_1])\n","    else:\n","        up6_1 = concatenate([UpSampling2D(size=(2, 2))(conv5), conv4_1])\n","    up6_1 = BatchNormalization()(up6_1)\n","    conv6_1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up6_1)\n","    conv6_1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv6_1)\n","    conv6_1 = Dropout(droprate)(conv6_1)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up6_2 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv6_1), conv4_0])\n","    else:\n","        up6_2 = concatenate([UpSampling2D(size=(2, 2))(conv6_1), conv4_0])\n","    up6_2 = BatchNormalization()(up6_2)\n","    conv6_2 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up6_2)\n","    conv6_2 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv6_2)\n","    conv6_2 = Dropout(droprate)(conv6_2)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up7 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv6_2), conv3])\n","    else:\n","        up7 = concatenate([UpSampling2D(size=(2, 2))(conv6_2), conv3])\n","    up7 = BatchNormalization()(up7)\n","    conv7 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up7)\n","    conv7 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv7)\n","    conv7 = Dropout(droprate)(conv7)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up8 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv7), conv2])\n","    else:\n","        up8 = concatenate([UpSampling2D(size=(2, 2))(conv7), conv2])\n","    up8 = BatchNormalization()(up8)\n","    conv8 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up8)\n","    conv8 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv8)\n","    conv8 = Dropout(droprate)(conv8)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up9 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv8), conv1])\n","    else:\n","        up9 = concatenate([UpSampling2D(size=(2, 2))(conv8), conv1])\n","    conv9 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up9)\n","    conv9 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv9)\n","\n","    conv10 = Conv2D(n_classes, (1, 1), activation='sigmoid')(conv9)\n","\n","    model = Model(inputs=inputs, outputs=conv10)\n","\n","    '''def weighted_binary_crossentropy(y_true, y_pred):\n","        class_loglosses = K.mean(K.binary_crossentropy(y_true, y_pred), axis=[0, 1, 2])\n","        return K.sum(class_loglosses * K.constant(class_weights))'''\n","\n","    model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])\n","    return model"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ffJN1ERqu6tb"},"source":["**STEP 5**"]},{"cell_type":"code","metadata":{"id":"ot830FLPKHRi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611296322614,"user_tz":-330,"elapsed":270225,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"82919ba6-9d28-4cd1-eff2-e390a6517fda"},"source":["#trial\n","import_libraries()\n","X_train, X_val, X_test, Y_train, Y_val, Y_test = initialize_elements()\n","model = unet_model(n_classes=6, im_sz=224, n_channels=9, n_filters_start=32, growth_factor=2, upconv=True,\n","               class_weights=[0.4894, 0.5044, 1.0000, 1.1585, 1.3453, 0.01])\n","model.fit(X_train, Y_train, batch_size=10, epochs=100, shuffle=True,\n","                  validation_data=(X_val, Y_val))"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive\n","17174808\n","9\n","1908312\n","1\n","11449872\n","(250, 224, 224, 9)\n","(250, 224, 224, 1)\n","(250, 224, 224, 6)\n","(160, 224, 224, 9)\n","(40, 224, 224, 9)\n","(50, 224, 224, 9)\n","(160, 224, 224, 6)\n","(40, 224, 224, 6)\n","(50, 224, 224, 6)\n","Epoch 1/100\n","16/16 [==============================] - 11s 178ms/step - loss: 10.2935 - accuracy: 0.4099 - val_loss: 14350.5000 - val_accuracy: 0.3176\n","Epoch 2/100\n","16/16 [==============================] - 2s 132ms/step - loss: 1.1848 - accuracy: 0.6504 - val_loss: 4516.0620 - val_accuracy: 0.3422\n","Epoch 3/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.8590 - accuracy: 0.7006 - val_loss: 82.4414 - val_accuracy: 0.4411\n","Epoch 4/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.7777 - accuracy: 0.7421 - val_loss: 137.5051 - val_accuracy: 0.4803\n","Epoch 5/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.6916 - accuracy: 0.7724 - val_loss: 20.2528 - val_accuracy: 0.5484\n","Epoch 6/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.6557 - accuracy: 0.7779 - val_loss: 25.6709 - val_accuracy: 0.5898\n","Epoch 7/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.6590 - accuracy: 0.7862 - val_loss: 1.7471 - val_accuracy: 0.7132\n","Epoch 8/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.6815 - accuracy: 0.7601 - val_loss: 1.1997 - val_accuracy: 0.7439\n","Epoch 9/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.6232 - accuracy: 0.7857 - val_loss: 0.9665 - val_accuracy: 0.6431\n","Epoch 10/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.5975 - accuracy: 0.7922 - val_loss: 0.7839 - val_accuracy: 0.7279\n","Epoch 11/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.5352 - accuracy: 0.8166 - val_loss: 0.9503 - val_accuracy: 0.6416\n","Epoch 12/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.5529 - accuracy: 0.8070 - val_loss: 1.2634 - val_accuracy: 0.5655\n","Epoch 13/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.5255 - accuracy: 0.8164 - val_loss: 1.2096 - val_accuracy: 0.5910\n","Epoch 14/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.5152 - accuracy: 0.8183 - val_loss: 0.7986 - val_accuracy: 0.7359\n","Epoch 15/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.4935 - accuracy: 0.8318 - val_loss: 0.7621 - val_accuracy: 0.7596\n","Epoch 16/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.5490 - accuracy: 0.8117 - val_loss: 0.6880 - val_accuracy: 0.7641\n","Epoch 17/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.4777 - accuracy: 0.8357 - val_loss: 0.7706 - val_accuracy: 0.7523\n","Epoch 18/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.5572 - accuracy: 0.8142 - val_loss: 0.6914 - val_accuracy: 0.7638\n","Epoch 19/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.4965 - accuracy: 0.8306 - val_loss: 0.6824 - val_accuracy: 0.7687\n","Epoch 20/100\n","16/16 [==============================] - 2s 130ms/step - loss: 0.4625 - accuracy: 0.8406 - val_loss: 0.7925 - val_accuracy: 0.7665\n","Epoch 21/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.5024 - accuracy: 0.8316 - val_loss: 0.8999 - val_accuracy: 0.7745\n","Epoch 22/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.4592 - accuracy: 0.8411 - val_loss: 0.5395 - val_accuracy: 0.8266\n","Epoch 23/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.4618 - accuracy: 0.8436 - val_loss: 0.7885 - val_accuracy: 0.7841\n","Epoch 24/100\n","16/16 [==============================] - 2s 134ms/step - loss: 0.4409 - accuracy: 0.8444 - val_loss: 1.0810 - val_accuracy: 0.7024\n","Epoch 25/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.3978 - accuracy: 0.8649 - val_loss: 1.2341 - val_accuracy: 0.7625\n","Epoch 26/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.4157 - accuracy: 0.8547 - val_loss: 0.5948 - val_accuracy: 0.8095\n","Epoch 27/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.3802 - accuracy: 0.8682 - val_loss: 0.5099 - val_accuracy: 0.8329\n","Epoch 28/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.3914 - accuracy: 0.8635 - val_loss: 0.7000 - val_accuracy: 0.7990\n","Epoch 29/100\n","16/16 [==============================] - 2s 130ms/step - loss: 0.4238 - accuracy: 0.8583 - val_loss: 0.5946 - val_accuracy: 0.8138\n","Epoch 30/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.4328 - accuracy: 0.8579 - val_loss: 2.0022 - val_accuracy: 0.5606\n","Epoch 31/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.5285 - accuracy: 0.8251 - val_loss: 1.2808 - val_accuracy: 0.6656\n","Epoch 32/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.4353 - accuracy: 0.8547 - val_loss: 0.6439 - val_accuracy: 0.8086\n","Epoch 33/100\n","16/16 [==============================] - 2s 133ms/step - loss: 0.4435 - accuracy: 0.8510 - val_loss: 0.4576 - val_accuracy: 0.8541\n","Epoch 34/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.3550 - accuracy: 0.8811 - val_loss: 0.4960 - val_accuracy: 0.8468\n","Epoch 35/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.3891 - accuracy: 0.8729 - val_loss: 0.5058 - val_accuracy: 0.8392\n","Epoch 36/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.3546 - accuracy: 0.8814 - val_loss: 0.8638 - val_accuracy: 0.7915\n","Epoch 37/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.3544 - accuracy: 0.8832 - val_loss: 0.6739 - val_accuracy: 0.8141\n","Epoch 38/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.3685 - accuracy: 0.8775 - val_loss: 0.4749 - val_accuracy: 0.8470\n","Epoch 39/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.3644 - accuracy: 0.8782 - val_loss: 0.4801 - val_accuracy: 0.8498\n","Epoch 40/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.3264 - accuracy: 0.8934 - val_loss: 0.4424 - val_accuracy: 0.8582\n","Epoch 41/100\n","16/16 [==============================] - 2s 130ms/step - loss: 0.2890 - accuracy: 0.9035 - val_loss: 0.4837 - val_accuracy: 0.8471\n","Epoch 42/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.2858 - accuracy: 0.9048 - val_loss: 0.9898 - val_accuracy: 0.6695\n","Epoch 43/100\n","16/16 [==============================] - 2s 137ms/step - loss: 0.2971 - accuracy: 0.9005 - val_loss: 0.3614 - val_accuracy: 0.8860\n","Epoch 44/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.3294 - accuracy: 0.8905 - val_loss: 0.4507 - val_accuracy: 0.8749\n","Epoch 45/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.2838 - accuracy: 0.9062 - val_loss: 0.3791 - val_accuracy: 0.8819\n","Epoch 46/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.3030 - accuracy: 0.8997 - val_loss: 0.5096 - val_accuracy: 0.8559\n","Epoch 47/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.3039 - accuracy: 0.9010 - val_loss: 0.4357 - val_accuracy: 0.8593\n","Epoch 48/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.2720 - accuracy: 0.9108 - val_loss: 0.3297 - val_accuracy: 0.8925\n","Epoch 49/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.2322 - accuracy: 0.9254 - val_loss: 0.3593 - val_accuracy: 0.8848\n","Epoch 50/100\n","16/16 [==============================] - 2s 133ms/step - loss: 0.2463 - accuracy: 0.9190 - val_loss: 0.3896 - val_accuracy: 0.8717\n","Epoch 51/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.2341 - accuracy: 0.9241 - val_loss: 0.3088 - val_accuracy: 0.9025\n","Epoch 52/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.2160 - accuracy: 0.9307 - val_loss: 0.4290 - val_accuracy: 0.8740\n","Epoch 53/100\n","16/16 [==============================] - 2s 133ms/step - loss: 0.2693 - accuracy: 0.9132 - val_loss: 0.2902 - val_accuracy: 0.9075\n","Epoch 54/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.2386 - accuracy: 0.9233 - val_loss: 0.3511 - val_accuracy: 0.8918\n","Epoch 55/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.2234 - accuracy: 0.9281 - val_loss: 0.2801 - val_accuracy: 0.9102\n","Epoch 56/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.1943 - accuracy: 0.9378 - val_loss: 0.8774 - val_accuracy: 0.7344\n","Epoch 57/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.2188 - accuracy: 0.9308 - val_loss: 1.0567 - val_accuracy: 0.6904\n","Epoch 58/100\n","16/16 [==============================] - 2s 133ms/step - loss: 0.2224 - accuracy: 0.9282 - val_loss: 0.3017 - val_accuracy: 0.9080\n","Epoch 59/100\n","16/16 [==============================] - 2s 133ms/step - loss: 0.1943 - accuracy: 0.9378 - val_loss: 0.2817 - val_accuracy: 0.9104\n","Epoch 60/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.2293 - accuracy: 0.9260 - val_loss: 0.3084 - val_accuracy: 0.9035\n","Epoch 61/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.2169 - accuracy: 0.9306 - val_loss: 0.3723 - val_accuracy: 0.8893\n","Epoch 62/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1868 - accuracy: 0.9400 - val_loss: 0.2606 - val_accuracy: 0.9157\n","Epoch 63/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1728 - accuracy: 0.9444 - val_loss: 0.2568 - val_accuracy: 0.9181\n","Epoch 64/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1697 - accuracy: 0.9452 - val_loss: 0.2587 - val_accuracy: 0.9164\n","Epoch 65/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1916 - accuracy: 0.9388 - val_loss: 0.2467 - val_accuracy: 0.9213\n","Epoch 66/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1899 - accuracy: 0.9381 - val_loss: 0.4860 - val_accuracy: 0.8662\n","Epoch 67/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.2232 - accuracy: 0.9278 - val_loss: 0.4163 - val_accuracy: 0.8816\n","Epoch 68/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.2128 - accuracy: 0.9333 - val_loss: 0.4192 - val_accuracy: 0.8742\n","Epoch 69/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1832 - accuracy: 0.9416 - val_loss: 0.3321 - val_accuracy: 0.8949\n","Epoch 70/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.1855 - accuracy: 0.9397 - val_loss: 0.2475 - val_accuracy: 0.9240\n","Epoch 71/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1735 - accuracy: 0.9443 - val_loss: 0.2463 - val_accuracy: 0.9224\n","Epoch 72/100\n","16/16 [==============================] - 2s 130ms/step - loss: 0.1857 - accuracy: 0.9404 - val_loss: 0.3562 - val_accuracy: 0.8894\n","Epoch 73/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.1859 - accuracy: 0.9395 - val_loss: 0.2170 - val_accuracy: 0.9304\n","Epoch 74/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1580 - accuracy: 0.9488 - val_loss: 0.2228 - val_accuracy: 0.9297\n","Epoch 75/100\n","16/16 [==============================] - 2s 130ms/step - loss: 0.1388 - accuracy: 0.9548 - val_loss: 0.1963 - val_accuracy: 0.9360\n","Epoch 76/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1659 - accuracy: 0.9456 - val_loss: 0.2086 - val_accuracy: 0.9339\n","Epoch 77/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.1625 - accuracy: 0.9468 - val_loss: 0.1921 - val_accuracy: 0.9373\n","Epoch 78/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.1468 - accuracy: 0.9520 - val_loss: 0.2070 - val_accuracy: 0.9331\n","Epoch 79/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.1553 - accuracy: 0.9489 - val_loss: 0.1898 - val_accuracy: 0.9378\n","Epoch 80/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1531 - accuracy: 0.9495 - val_loss: 0.1947 - val_accuracy: 0.9370\n","Epoch 81/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.1470 - accuracy: 0.9514 - val_loss: 0.1968 - val_accuracy: 0.9358\n","Epoch 82/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1680 - accuracy: 0.9447 - val_loss: 0.3156 - val_accuracy: 0.9012\n","Epoch 83/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.1584 - accuracy: 0.9479 - val_loss: 0.2009 - val_accuracy: 0.9346\n","Epoch 84/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1558 - accuracy: 0.9484 - val_loss: 0.2143 - val_accuracy: 0.9312\n","Epoch 85/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1382 - accuracy: 0.9544 - val_loss: 0.1729 - val_accuracy: 0.9431\n","Epoch 86/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.1384 - accuracy: 0.9544 - val_loss: 0.1748 - val_accuracy: 0.9427\n","Epoch 87/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1436 - accuracy: 0.9529 - val_loss: 0.1771 - val_accuracy: 0.9411\n","Epoch 88/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.1293 - accuracy: 0.9572 - val_loss: 0.1748 - val_accuracy: 0.9413\n","Epoch 89/100\n","16/16 [==============================] - 2s 139ms/step - loss: 0.1504 - accuracy: 0.9494 - val_loss: 0.1732 - val_accuracy: 0.9434\n","Epoch 90/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1510 - accuracy: 0.9497 - val_loss: 0.1796 - val_accuracy: 0.9416\n","Epoch 91/100\n","16/16 [==============================] - 2s 133ms/step - loss: 0.1347 - accuracy: 0.9553 - val_loss: 0.1881 - val_accuracy: 0.9367\n","Epoch 92/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1485 - accuracy: 0.9503 - val_loss: 0.2707 - val_accuracy: 0.9236\n","Epoch 93/100\n","16/16 [==============================] - 2s 130ms/step - loss: 0.1427 - accuracy: 0.9523 - val_loss: 0.1788 - val_accuracy: 0.9414\n","Epoch 94/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.1413 - accuracy: 0.9527 - val_loss: 0.1830 - val_accuracy: 0.9388\n","Epoch 95/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1332 - accuracy: 0.9545 - val_loss: 0.1898 - val_accuracy: 0.9390\n","Epoch 96/100\n","16/16 [==============================] - 2s 130ms/step - loss: 0.1101 - accuracy: 0.9632 - val_loss: 0.2088 - val_accuracy: 0.9339\n","Epoch 97/100\n","16/16 [==============================] - 2s 133ms/step - loss: 0.1349 - accuracy: 0.9542 - val_loss: 0.1523 - val_accuracy: 0.9486\n","Epoch 98/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.1221 - accuracy: 0.9587 - val_loss: 0.1704 - val_accuracy: 0.9439\n","Epoch 99/100\n","16/16 [==============================] - 2s 132ms/step - loss: 0.1216 - accuracy: 0.9589 - val_loss: 0.1943 - val_accuracy: 0.9355\n","Epoch 100/100\n","16/16 [==============================] - 2s 131ms/step - loss: 0.1225 - accuracy: 0.9584 - val_loss: 0.1616 - val_accuracy: 0.9467\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7fd0d2098908>"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rVnY4fR2xtA6","executionInfo":{"status":"ok","timestamp":1611296323716,"user_tz":-330,"elapsed":36139,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"199516c3-28f5-4ddf-d877-ef489ab14f53"},"source":["loss, acc = model.evaluate(X_test,  Y_test)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["2/2 [==============================] - 2s 612ms/step - loss: 0.1389 - accuracy: 0.9549\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"lYnYy3wAu9ib"},"source":["**STEP 5**"]},{"cell_type":"code","metadata":{"id":"IMc1rN9GOzaw","executionInfo":{"status":"ok","timestamp":1611296334411,"user_tz":-330,"elapsed":3039,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["#trial \n","model.save('/content/gdrive/My Drive/good_gTruth/Models/model_t3_jpg_01.h5')"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Gujn1M2nu_NR"},"source":["**STEP 6**"]},{"cell_type":"code","metadata":{"id":"VfesVjSlWu9J","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608192853386,"user_tz":-330,"elapsed":28981,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"aff0f21f-04e6-40bd-81d7-8549f60fb901"},"source":["#trial\n","import_libraries()\n","loss, acc = model.evaluate(X_test,  Y_test)\n","preds = model.predict(X_test)\n","\n","import numpy as np\n","from PIL import Image\n","\n","img = np.zeros((224,224,3),np.uint8)\n","Preds_max = np.zeros((50, 224, 224, 1), dtype = np.float32)\n","p=0\n","\n","for one in preds:\n","  #print(one.shape)\n","  #print(one[0][0][0])\n","  for i in range(224):\n","    for j in range(224):\n","      if np.argmax(one[i][j]) == 1:  #Ocean\n","        img[i,j] = [0,0,255]\n","      elif np.argmax(one[i][j]) == 2:    #Settlement\n","        img[i,j] = [255,0,0]\n","      elif np.argmax(one[i][j]) == 3:    #Forest\n","        img[i,j] = [0, 255, 0]\n","      elif np.argmax(one[i][j]) == 4:    #Mangroves\n","        img[i,j] = [255,255,0]\n","      elif np.argmax(one[i][j]) == 5:    #Agriculture\n","        img[i,j] = [255,182,193]\n","      else:    #Undefined\n","        img[i,j] = [255,255,255]\n","      Preds_max[p][i][j] = np.argmax(one[i][j])\n","  name = '/content/gdrive/My Drive/good_gTruth/Test/jp2/7_jp2_1/' + str(p) + '.png'\n","  xgb_image = Image.fromarray(img, 'RGB')\n","  xgb_image.save(name)\n","  p=p+1\n","  print(p)\n","\n","print(Preds_max.shape)\n","print(Preds_max[0][0][0])\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n","Collecting git+https://github.com/qubvel/segmentation_models\n","  Cloning https://github.com/qubvel/segmentation_models to /tmp/pip-req-build-97bxq7zn\n","  Running command git clone -q https://github.com/qubvel/segmentation_models /tmp/pip-req-build-97bxq7zn\n","  Running command git submodule update --init --recursive -q\n","Requirement already satisfied (use --upgrade to upgrade): segmentation-models==1.0.1 from git+https://github.com/qubvel/segmentation_models in /usr/local/lib/python3.6/dist-packages\n","Requirement already satisfied: keras_applications<=1.0.8,>=1.0.7 in /usr/local/lib/python3.6/dist-packages (from segmentation-models==1.0.1) (1.0.8)\n","Requirement already satisfied: image-classifiers==1.0.0 in /usr/local/lib/python3.6/dist-packages (from segmentation-models==1.0.1) (1.0.0)\n","Requirement already satisfied: efficientnet==1.0.0 in /usr/local/lib/python3.6/dist-packages (from segmentation-models==1.0.1) (1.0.0)\n","Requirement already satisfied: numpy>=1.9.1 in /usr/local/lib/python3.6/dist-packages (from keras_applications<=1.0.8,>=1.0.7->segmentation-models==1.0.1) (1.18.5)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras_applications<=1.0.8,>=1.0.7->segmentation-models==1.0.1) (2.10.0)\n","Requirement already satisfied: scikit-image in /usr/local/lib/python3.6/dist-packages (from efficientnet==1.0.0->segmentation-models==1.0.1) (0.16.2)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from h5py->keras_applications<=1.0.8,>=1.0.7->segmentation-models==1.0.1) (1.15.0)\n","Requirement already satisfied: pillow>=4.3.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->efficientnet==1.0.0->segmentation-models==1.0.1) (7.0.0)\n","Requirement already satisfied: PyWavelets>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->efficientnet==1.0.0->segmentation-models==1.0.1) (1.1.1)\n","Requirement already satisfied: scipy>=0.19.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->efficientnet==1.0.0->segmentation-models==1.0.1) (1.4.1)\n","Requirement already satisfied: matplotlib!=3.0.0,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->efficientnet==1.0.0->segmentation-models==1.0.1) (3.2.2)\n","Requirement already satisfied: imageio>=2.3.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->efficientnet==1.0.0->segmentation-models==1.0.1) (2.4.1)\n","Requirement already satisfied: networkx>=2.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->efficientnet==1.0.0->segmentation-models==1.0.1) (2.5)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->efficientnet==1.0.0->segmentation-models==1.0.1) (0.10.0)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->efficientnet==1.0.0->segmentation-models==1.0.1) (2.8.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->efficientnet==1.0.0->segmentation-models==1.0.1) (1.3.1)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image->efficientnet==1.0.0->segmentation-models==1.0.1) (2.4.7)\n","Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.6/dist-packages (from networkx>=2.0->scikit-image->efficientnet==1.0.0->segmentation-models==1.0.1) (4.4.2)\n","Building wheels for collected packages: segmentation-models\n","  Building wheel for segmentation-models (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for segmentation-models: filename=segmentation_models-1.0.1-cp36-none-any.whl size=33792 sha256=6b1e7b42b951c52f29cb6e1f23a1a36383aeaff2daf32b6e895ebbad271f4437\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-d7dq1o02/wheels/49/cf/46/cbb4bb64518c402aea99df9d466f1081450597e653256bbcf4\n","Successfully built segmentation-models\n","2/2 [==============================] - 0s 69ms/step - loss: 0.1470 - accuracy: 0.9509\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","(50, 224, 224, 1)\n","[3.]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0hoLPTOmvI0a"},"source":["**END**"]},{"cell_type":"code","metadata":{"id":"zU2fRe2m8jWT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1605083572181,"user_tz":-330,"elapsed":931544,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"5208c723-6723-4adf-c1be-57d6c228477c"},"source":["model = unet_model(n_classes=6, im_sz=224, n_channels=7, n_filters_start=32, growth_factor=2, upconv=True,\n","               class_weights=[1.3453, 1.0000, 1.1585, 0.4894, 0.5044, 0.01])\n","\n","model.fit(X_train, Y_train, batch_size=16, epochs=100, shuffle=True,\n","                  validation_data=(X_val, Y_val))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/500\n","10/10 [==============================] - 2s 202ms/step - loss: 2.6538 - accuracy: 0.3190 - val_loss: 2.2549 - val_accuracy: 0.2991\n","Epoch 2/500\n","10/10 [==============================] - 2s 169ms/step - loss: 1.6320 - accuracy: 0.3307 - val_loss: 1.7213 - val_accuracy: 0.3219\n","Epoch 3/500\n","10/10 [==============================] - 2s 167ms/step - loss: 1.5419 - accuracy: 0.3160 - val_loss: 1.9707 - val_accuracy: 0.3005\n","Epoch 4/500\n","10/10 [==============================] - 2s 166ms/step - loss: 1.5312 - accuracy: 0.3107 - val_loss: 1.6609 - val_accuracy: 0.2908\n","Epoch 5/500\n","10/10 [==============================] - 2s 165ms/step - loss: 1.5209 - accuracy: 0.3152 - val_loss: 1.6198 - val_accuracy: 0.3113\n","Epoch 6/500\n","10/10 [==============================] - 2s 167ms/step - loss: 1.5069 - accuracy: 0.3073 - val_loss: 1.5574 - val_accuracy: 0.2871\n","Epoch 7/500\n","10/10 [==============================] - 2s 169ms/step - loss: 1.5100 - accuracy: 0.3010 - val_loss: 1.5715 - val_accuracy: 0.2840\n","Epoch 8/500\n","10/10 [==============================] - 2s 165ms/step - loss: 1.4998 - accuracy: 0.2962 - val_loss: 1.5221 - val_accuracy: 0.2837\n","Epoch 9/500\n","10/10 [==============================] - 2s 167ms/step - loss: 1.4954 - accuracy: 0.2948 - val_loss: 1.5199 - val_accuracy: 0.2822\n","Epoch 10/500\n","10/10 [==============================] - 2s 166ms/step - loss: 1.4941 - accuracy: 0.2940 - val_loss: 1.5152 - val_accuracy: 0.2838\n","Epoch 11/500\n","10/10 [==============================] - 2s 167ms/step - loss: 1.4928 - accuracy: 0.2931 - val_loss: 1.5026 - val_accuracy: 0.2842\n","Epoch 12/500\n","10/10 [==============================] - 2s 166ms/step - loss: 1.4911 - accuracy: 0.2958 - val_loss: 1.5008 - val_accuracy: 0.2838\n","Epoch 13/500\n","10/10 [==============================] - 2s 167ms/step - loss: 1.4918 - accuracy: 0.2984 - val_loss: 1.5146 - val_accuracy: 0.2811\n","Epoch 14/500\n","10/10 [==============================] - 2s 166ms/step - loss: 1.4880 - accuracy: 0.3039 - val_loss: 1.4973 - val_accuracy: 0.2864\n","Epoch 15/500\n","10/10 [==============================] - 2s 166ms/step - loss: 1.4236 - accuracy: 0.3121 - val_loss: 1.3939 - val_accuracy: 0.3314\n","Epoch 16/500\n","10/10 [==============================] - 2s 166ms/step - loss: 1.3964 - accuracy: 0.3110 - val_loss: 1.7136 - val_accuracy: 0.3590\n","Epoch 17/500\n","10/10 [==============================] - 2s 166ms/step - loss: 1.3746 - accuracy: 0.3074 - val_loss: 1.7011 - val_accuracy: 0.3660\n","Epoch 18/500\n","10/10 [==============================] - 2s 166ms/step - loss: 1.3614 - accuracy: 0.3165 - val_loss: 1.9362 - val_accuracy: 0.3659\n","Epoch 19/500\n","10/10 [==============================] - 2s 168ms/step - loss: 1.3566 - accuracy: 0.3217 - val_loss: 1.8093 - val_accuracy: 0.3683\n","Epoch 20/500\n","10/10 [==============================] - 2s 166ms/step - loss: 1.3526 - accuracy: 0.3504 - val_loss: 1.6454 - val_accuracy: 0.3785\n","Epoch 21/500\n","10/10 [==============================] - 2s 167ms/step - loss: 1.3495 - accuracy: 0.3363 - val_loss: 1.5569 - val_accuracy: 0.3867\n","Epoch 22/500\n","10/10 [==============================] - 2s 166ms/step - loss: 1.3445 - accuracy: 0.3590 - val_loss: 1.8351 - val_accuracy: 0.3860\n","Epoch 23/500\n","10/10 [==============================] - 2s 167ms/step - loss: 1.2039 - accuracy: 0.3950 - val_loss: 2.7085 - val_accuracy: 0.3879\n","Epoch 24/500\n","10/10 [==============================] - 2s 167ms/step - loss: 1.1294 - accuracy: 0.4379 - val_loss: 1.6084 - val_accuracy: 0.4260\n","Epoch 25/500\n","10/10 [==============================] - 2s 166ms/step - loss: 1.0931 - accuracy: 0.4504 - val_loss: 1.4152 - val_accuracy: 0.3930\n","Epoch 26/500\n","10/10 [==============================] - 2s 167ms/step - loss: 1.0317 - accuracy: 0.4911 - val_loss: 2.0895 - val_accuracy: 0.4536\n","Epoch 27/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.9537 - accuracy: 0.6588 - val_loss: 1.5108 - val_accuracy: 0.6487\n","Epoch 28/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.8240 - accuracy: 0.7185 - val_loss: 1.7984 - val_accuracy: 0.6516\n","Epoch 29/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.6842 - accuracy: 0.7292 - val_loss: 1.0893 - val_accuracy: 0.6522\n","Epoch 30/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.6184 - accuracy: 0.7281 - val_loss: 1.3504 - val_accuracy: 0.6436\n","Epoch 31/500\n","10/10 [==============================] - 2s 165ms/step - loss: 0.5890 - accuracy: 0.7385 - val_loss: 2.0599 - val_accuracy: 0.6387\n","Epoch 32/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.5665 - accuracy: 0.7424 - val_loss: 2.8872 - val_accuracy: 0.6099\n","Epoch 33/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.5428 - accuracy: 0.7451 - val_loss: 1.6737 - val_accuracy: 0.6423\n","Epoch 34/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.5660 - accuracy: 0.7369 - val_loss: 3.2829 - val_accuracy: 0.6287\n","Epoch 35/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.5321 - accuracy: 0.7460 - val_loss: 1.9829 - val_accuracy: 0.6521\n","Epoch 36/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.5305 - accuracy: 0.7479 - val_loss: 3.7946 - val_accuracy: 0.6376\n","Epoch 37/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.5149 - accuracy: 0.7492 - val_loss: 3.1228 - val_accuracy: 0.6399\n","Epoch 38/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.5081 - accuracy: 0.7555 - val_loss: 2.2117 - val_accuracy: 0.6427\n","Epoch 39/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.5073 - accuracy: 0.7536 - val_loss: 3.3365 - val_accuracy: 0.6496\n","Epoch 40/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.4793 - accuracy: 0.7570 - val_loss: 2.4111 - val_accuracy: 0.6650\n","Epoch 41/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.4823 - accuracy: 0.7620 - val_loss: 3.8474 - val_accuracy: 0.6410\n","Epoch 42/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.4732 - accuracy: 0.7597 - val_loss: 1.8870 - val_accuracy: 0.6815\n","Epoch 43/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.4588 - accuracy: 0.7634 - val_loss: 1.8767 - val_accuracy: 0.7061\n","Epoch 44/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.4683 - accuracy: 0.7653 - val_loss: 1.3191 - val_accuracy: 0.7279\n","Epoch 45/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.4432 - accuracy: 0.7706 - val_loss: 0.9360 - val_accuracy: 0.7286\n","Epoch 46/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.4496 - accuracy: 0.7717 - val_loss: 1.4236 - val_accuracy: 0.7227\n","Epoch 47/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.4632 - accuracy: 0.7844 - val_loss: 0.6554 - val_accuracy: 0.7572\n","Epoch 48/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.5291 - accuracy: 0.7956 - val_loss: 1.2762 - val_accuracy: 0.7393\n","Epoch 49/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.4952 - accuracy: 0.7735 - val_loss: 0.6143 - val_accuracy: 0.7918\n","Epoch 50/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.4637 - accuracy: 0.7867 - val_loss: 0.6790 - val_accuracy: 0.7824\n","Epoch 51/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.4748 - accuracy: 0.8071 - val_loss: 0.5943 - val_accuracy: 0.7862\n","Epoch 52/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.4469 - accuracy: 0.8149 - val_loss: 0.5370 - val_accuracy: 0.8313\n","Epoch 53/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.4226 - accuracy: 0.8672 - val_loss: 0.5753 - val_accuracy: 0.8266\n","Epoch 54/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.3780 - accuracy: 0.8776 - val_loss: 0.7647 - val_accuracy: 0.7930\n","Epoch 55/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.3498 - accuracy: 0.8831 - val_loss: 0.9385 - val_accuracy: 0.7461\n","Epoch 56/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.3391 - accuracy: 0.8860 - val_loss: 0.9665 - val_accuracy: 0.7415\n","Epoch 57/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.3333 - accuracy: 0.8891 - val_loss: 1.2550 - val_accuracy: 0.7451\n","Epoch 58/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.3329 - accuracy: 0.8904 - val_loss: 0.7917 - val_accuracy: 0.7832\n","Epoch 59/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.3419 - accuracy: 0.8879 - val_loss: 1.1395 - val_accuracy: 0.7254\n","Epoch 60/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.3104 - accuracy: 0.8967 - val_loss: 1.1685 - val_accuracy: 0.7337\n","Epoch 61/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.3137 - accuracy: 0.8955 - val_loss: 0.9926 - val_accuracy: 0.7587\n","Epoch 62/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.2975 - accuracy: 0.9015 - val_loss: 0.8439 - val_accuracy: 0.7689\n","Epoch 63/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.2812 - accuracy: 0.9067 - val_loss: 0.7228 - val_accuracy: 0.7792\n","Epoch 64/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.2820 - accuracy: 0.9058 - val_loss: 1.1110 - val_accuracy: 0.7575\n","Epoch 65/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.3264 - accuracy: 0.8925 - val_loss: 0.4073 - val_accuracy: 0.8662\n","Epoch 66/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.3279 - accuracy: 0.8920 - val_loss: 0.4163 - val_accuracy: 0.8658\n","Epoch 67/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.3205 - accuracy: 0.8925 - val_loss: 0.7575 - val_accuracy: 0.7769\n","Epoch 68/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.2830 - accuracy: 0.9061 - val_loss: 0.4705 - val_accuracy: 0.8592\n","Epoch 69/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.2859 - accuracy: 0.9051 - val_loss: 0.5834 - val_accuracy: 0.8051\n","Epoch 70/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.2896 - accuracy: 0.9051 - val_loss: 0.7050 - val_accuracy: 0.7482\n","Epoch 71/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.2887 - accuracy: 0.9067 - val_loss: 0.7530 - val_accuracy: 0.7840\n","Epoch 72/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.2575 - accuracy: 0.9159 - val_loss: 0.5081 - val_accuracy: 0.8331\n","Epoch 73/500\n","10/10 [==============================] - 2s 165ms/step - loss: 0.2477 - accuracy: 0.9187 - val_loss: 0.5186 - val_accuracy: 0.8195\n","Epoch 74/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.2449 - accuracy: 0.9187 - val_loss: 0.5783 - val_accuracy: 0.8195\n","Epoch 75/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.2448 - accuracy: 0.9200 - val_loss: 0.6338 - val_accuracy: 0.8081\n","Epoch 76/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.2422 - accuracy: 0.9198 - val_loss: 0.7225 - val_accuracy: 0.7782\n","Epoch 77/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.2281 - accuracy: 0.9256 - val_loss: 0.6826 - val_accuracy: 0.7850\n","Epoch 78/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.2395 - accuracy: 0.9218 - val_loss: 0.5913 - val_accuracy: 0.8149\n","Epoch 79/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.2267 - accuracy: 0.9262 - val_loss: 0.4706 - val_accuracy: 0.8440\n","Epoch 80/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.2261 - accuracy: 0.9248 - val_loss: 0.5641 - val_accuracy: 0.8162\n","Epoch 81/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.2270 - accuracy: 0.9253 - val_loss: 0.5511 - val_accuracy: 0.8143\n","Epoch 82/500\n","10/10 [==============================] - 2s 165ms/step - loss: 0.2154 - accuracy: 0.9297 - val_loss: 0.9135 - val_accuracy: 0.7660\n","Epoch 83/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.2230 - accuracy: 0.9270 - val_loss: 0.6545 - val_accuracy: 0.7951\n","Epoch 84/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.2067 - accuracy: 0.9324 - val_loss: 0.5051 - val_accuracy: 0.8401\n","Epoch 85/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1974 - accuracy: 0.9355 - val_loss: 0.3595 - val_accuracy: 0.8774\n","Epoch 86/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.2005 - accuracy: 0.9343 - val_loss: 0.4563 - val_accuracy: 0.8506\n","Epoch 87/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.2103 - accuracy: 0.9316 - val_loss: 0.4115 - val_accuracy: 0.8763\n","Epoch 88/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.2161 - accuracy: 0.9291 - val_loss: 0.6163 - val_accuracy: 0.8297\n","Epoch 89/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.2204 - accuracy: 0.9290 - val_loss: 0.8177 - val_accuracy: 0.7852\n","Epoch 90/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.2059 - accuracy: 0.9332 - val_loss: 0.3431 - val_accuracy: 0.8984\n","Epoch 91/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.2094 - accuracy: 0.9324 - val_loss: 0.3314 - val_accuracy: 0.8893\n","Epoch 92/500\n","10/10 [==============================] - 2s 165ms/step - loss: 0.1998 - accuracy: 0.9346 - val_loss: 0.2610 - val_accuracy: 0.9145\n","Epoch 93/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1963 - accuracy: 0.9361 - val_loss: 0.2519 - val_accuracy: 0.9190\n","Epoch 94/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1886 - accuracy: 0.9382 - val_loss: 0.2526 - val_accuracy: 0.9206\n","Epoch 95/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1842 - accuracy: 0.9392 - val_loss: 0.2508 - val_accuracy: 0.9181\n","Epoch 96/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1739 - accuracy: 0.9429 - val_loss: 0.2349 - val_accuracy: 0.9247\n","Epoch 97/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1674 - accuracy: 0.9444 - val_loss: 0.2903 - val_accuracy: 0.8999\n","Epoch 98/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1681 - accuracy: 0.9445 - val_loss: 0.2562 - val_accuracy: 0.9169\n","Epoch 99/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1707 - accuracy: 0.9437 - val_loss: 0.2548 - val_accuracy: 0.9193\n","Epoch 100/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1626 - accuracy: 0.9460 - val_loss: 0.2382 - val_accuracy: 0.9229\n","Epoch 101/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1592 - accuracy: 0.9468 - val_loss: 0.2479 - val_accuracy: 0.9178\n","Epoch 102/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1603 - accuracy: 0.9470 - val_loss: 0.2309 - val_accuracy: 0.9267\n","Epoch 103/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1620 - accuracy: 0.9458 - val_loss: 0.2124 - val_accuracy: 0.9322\n","Epoch 104/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.1583 - accuracy: 0.9467 - val_loss: 0.2743 - val_accuracy: 0.9101\n","Epoch 105/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1584 - accuracy: 0.9466 - val_loss: 0.2254 - val_accuracy: 0.9290\n","Epoch 106/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1665 - accuracy: 0.9449 - val_loss: 0.3036 - val_accuracy: 0.8955\n","Epoch 107/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1627 - accuracy: 0.9455 - val_loss: 0.2298 - val_accuracy: 0.9283\n","Epoch 108/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.1590 - accuracy: 0.9471 - val_loss: 0.2304 - val_accuracy: 0.9247\n","Epoch 109/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1563 - accuracy: 0.9480 - val_loss: 0.2502 - val_accuracy: 0.9215\n","Epoch 110/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.1544 - accuracy: 0.9483 - val_loss: 0.2005 - val_accuracy: 0.9365\n","Epoch 111/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1496 - accuracy: 0.9493 - val_loss: 0.2212 - val_accuracy: 0.9289\n","Epoch 112/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.1495 - accuracy: 0.9495 - val_loss: 0.2183 - val_accuracy: 0.9302\n","Epoch 113/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1496 - accuracy: 0.9492 - val_loss: 0.2084 - val_accuracy: 0.9322\n","Epoch 114/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1498 - accuracy: 0.9497 - val_loss: 0.2017 - val_accuracy: 0.9352\n","Epoch 115/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1460 - accuracy: 0.9509 - val_loss: 0.2118 - val_accuracy: 0.9315\n","Epoch 116/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1447 - accuracy: 0.9511 - val_loss: 0.2155 - val_accuracy: 0.9297\n","Epoch 117/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1498 - accuracy: 0.9495 - val_loss: 0.2130 - val_accuracy: 0.9310\n","Epoch 118/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.1565 - accuracy: 0.9472 - val_loss: 0.2486 - val_accuracy: 0.9224\n","Epoch 119/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1553 - accuracy: 0.9477 - val_loss: 0.1947 - val_accuracy: 0.9378\n","Epoch 120/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.1538 - accuracy: 0.9487 - val_loss: 0.2202 - val_accuracy: 0.9306\n","Epoch 121/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1522 - accuracy: 0.9490 - val_loss: 0.2215 - val_accuracy: 0.9289\n","Epoch 122/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1398 - accuracy: 0.9525 - val_loss: 0.1872 - val_accuracy: 0.9410\n","Epoch 123/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1348 - accuracy: 0.9543 - val_loss: 0.1865 - val_accuracy: 0.9406\n","Epoch 124/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1343 - accuracy: 0.9542 - val_loss: 0.2008 - val_accuracy: 0.9359\n","Epoch 125/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1326 - accuracy: 0.9547 - val_loss: 0.1994 - val_accuracy: 0.9355\n","Epoch 126/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.1368 - accuracy: 0.9530 - val_loss: 0.1900 - val_accuracy: 0.9391\n","Epoch 127/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1304 - accuracy: 0.9552 - val_loss: 0.1745 - val_accuracy: 0.9434\n","Epoch 128/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1334 - accuracy: 0.9542 - val_loss: 0.1862 - val_accuracy: 0.9400\n","Epoch 129/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1308 - accuracy: 0.9552 - val_loss: 0.1840 - val_accuracy: 0.9401\n","Epoch 130/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1314 - accuracy: 0.9550 - val_loss: 0.2015 - val_accuracy: 0.9357\n","Epoch 131/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1468 - accuracy: 0.9511 - val_loss: 0.4257 - val_accuracy: 0.8711\n","Epoch 132/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1521 - accuracy: 0.9482 - val_loss: 0.2457 - val_accuracy: 0.9295\n","Epoch 133/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1562 - accuracy: 0.9474 - val_loss: 0.2064 - val_accuracy: 0.9314\n","Epoch 134/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1548 - accuracy: 0.9491 - val_loss: 0.2647 - val_accuracy: 0.9172\n","Epoch 135/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1467 - accuracy: 0.9501 - val_loss: 0.2308 - val_accuracy: 0.9307\n","Epoch 136/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.1447 - accuracy: 0.9512 - val_loss: 0.1986 - val_accuracy: 0.9399\n","Epoch 137/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1387 - accuracy: 0.9529 - val_loss: 0.1984 - val_accuracy: 0.9366\n","Epoch 138/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1369 - accuracy: 0.9537 - val_loss: 0.2289 - val_accuracy: 0.9272\n","Epoch 139/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.1334 - accuracy: 0.9543 - val_loss: 0.1844 - val_accuracy: 0.9418\n","Epoch 140/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1301 - accuracy: 0.9556 - val_loss: 0.2162 - val_accuracy: 0.9293\n","Epoch 141/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1326 - accuracy: 0.9546 - val_loss: 0.1850 - val_accuracy: 0.9422\n","Epoch 142/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1267 - accuracy: 0.9562 - val_loss: 0.1777 - val_accuracy: 0.9426\n","Epoch 143/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1221 - accuracy: 0.9576 - val_loss: 0.1903 - val_accuracy: 0.9409\n","Epoch 144/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1196 - accuracy: 0.9585 - val_loss: 0.1855 - val_accuracy: 0.9409\n","Epoch 145/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1168 - accuracy: 0.9593 - val_loss: 0.1816 - val_accuracy: 0.9430\n","Epoch 146/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1153 - accuracy: 0.9595 - val_loss: 0.1641 - val_accuracy: 0.9476\n","Epoch 147/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1166 - accuracy: 0.9592 - val_loss: 0.1616 - val_accuracy: 0.9484\n","Epoch 148/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1184 - accuracy: 0.9587 - val_loss: 0.1708 - val_accuracy: 0.9457\n","Epoch 149/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1145 - accuracy: 0.9599 - val_loss: 0.1667 - val_accuracy: 0.9475\n","Epoch 150/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1109 - accuracy: 0.9610 - val_loss: 0.1611 - val_accuracy: 0.9493\n","Epoch 151/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.1115 - accuracy: 0.9606 - val_loss: 0.1928 - val_accuracy: 0.9393\n","Epoch 152/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1129 - accuracy: 0.9601 - val_loss: 0.1659 - val_accuracy: 0.9476\n","Epoch 153/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1107 - accuracy: 0.9610 - val_loss: 0.1675 - val_accuracy: 0.9477\n","Epoch 154/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1108 - accuracy: 0.9608 - val_loss: 0.1604 - val_accuracy: 0.9492\n","Epoch 155/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1129 - accuracy: 0.9603 - val_loss: 0.1680 - val_accuracy: 0.9464\n","Epoch 156/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1087 - accuracy: 0.9615 - val_loss: 0.1660 - val_accuracy: 0.9468\n","Epoch 157/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1206 - accuracy: 0.9579 - val_loss: 0.1872 - val_accuracy: 0.9411\n","Epoch 158/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1222 - accuracy: 0.9574 - val_loss: 0.1614 - val_accuracy: 0.9487\n","Epoch 159/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1177 - accuracy: 0.9587 - val_loss: 0.1750 - val_accuracy: 0.9443\n","Epoch 160/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1170 - accuracy: 0.9586 - val_loss: 0.1548 - val_accuracy: 0.9491\n","Epoch 161/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1118 - accuracy: 0.9605 - val_loss: 0.1921 - val_accuracy: 0.9401\n","Epoch 162/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1088 - accuracy: 0.9616 - val_loss: 0.1639 - val_accuracy: 0.9491\n","Epoch 163/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1072 - accuracy: 0.9621 - val_loss: 0.1630 - val_accuracy: 0.9494\n","Epoch 164/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1069 - accuracy: 0.9618 - val_loss: 0.1532 - val_accuracy: 0.9512\n","Epoch 165/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1052 - accuracy: 0.9626 - val_loss: 0.1508 - val_accuracy: 0.9522\n","Epoch 166/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.1014 - accuracy: 0.9640 - val_loss: 0.1496 - val_accuracy: 0.9529\n","Epoch 167/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.1030 - accuracy: 0.9634 - val_loss: 0.1505 - val_accuracy: 0.9531\n","Epoch 168/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.1022 - accuracy: 0.9634 - val_loss: 0.1615 - val_accuracy: 0.9505\n","Epoch 169/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1022 - accuracy: 0.9635 - val_loss: 0.1585 - val_accuracy: 0.9501\n","Epoch 170/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0982 - accuracy: 0.9649 - val_loss: 0.1544 - val_accuracy: 0.9523\n","Epoch 171/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1008 - accuracy: 0.9640 - val_loss: 0.1626 - val_accuracy: 0.9498\n","Epoch 172/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.1009 - accuracy: 0.9639 - val_loss: 0.1655 - val_accuracy: 0.9495\n","Epoch 173/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0991 - accuracy: 0.9648 - val_loss: 0.1636 - val_accuracy: 0.9496\n","Epoch 174/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0982 - accuracy: 0.9651 - val_loss: 0.1676 - val_accuracy: 0.9488\n","Epoch 175/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0969 - accuracy: 0.9656 - val_loss: 0.1606 - val_accuracy: 0.9509\n","Epoch 176/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0970 - accuracy: 0.9655 - val_loss: 0.1612 - val_accuracy: 0.9507\n","Epoch 177/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0958 - accuracy: 0.9657 - val_loss: 0.1607 - val_accuracy: 0.9518\n","Epoch 178/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0949 - accuracy: 0.9661 - val_loss: 0.1528 - val_accuracy: 0.9532\n","Epoch 179/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0935 - accuracy: 0.9667 - val_loss: 0.1535 - val_accuracy: 0.9537\n","Epoch 180/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0935 - accuracy: 0.9666 - val_loss: 0.1541 - val_accuracy: 0.9535\n","Epoch 181/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0919 - accuracy: 0.9673 - val_loss: 0.1454 - val_accuracy: 0.9555\n","Epoch 182/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0945 - accuracy: 0.9664 - val_loss: 0.1549 - val_accuracy: 0.9531\n","Epoch 183/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0964 - accuracy: 0.9655 - val_loss: 0.1434 - val_accuracy: 0.9554\n","Epoch 184/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0973 - accuracy: 0.9655 - val_loss: 0.1571 - val_accuracy: 0.9526\n","Epoch 185/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0918 - accuracy: 0.9673 - val_loss: 0.1556 - val_accuracy: 0.9540\n","Epoch 186/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0915 - accuracy: 0.9673 - val_loss: 0.1507 - val_accuracy: 0.9547\n","Epoch 187/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0902 - accuracy: 0.9677 - val_loss: 0.1438 - val_accuracy: 0.9561\n","Epoch 188/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0887 - accuracy: 0.9683 - val_loss: 0.1461 - val_accuracy: 0.9561\n","Epoch 189/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0900 - accuracy: 0.9677 - val_loss: 0.1663 - val_accuracy: 0.9492\n","Epoch 190/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0909 - accuracy: 0.9675 - val_loss: 0.1471 - val_accuracy: 0.9564\n","Epoch 191/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0891 - accuracy: 0.9682 - val_loss: 0.1783 - val_accuracy: 0.9470\n","Epoch 192/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0873 - accuracy: 0.9687 - val_loss: 0.1474 - val_accuracy: 0.9558\n","Epoch 193/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0864 - accuracy: 0.9690 - val_loss: 0.1521 - val_accuracy: 0.9553\n","Epoch 194/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0857 - accuracy: 0.9693 - val_loss: 0.1445 - val_accuracy: 0.9573\n","Epoch 195/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0864 - accuracy: 0.9690 - val_loss: 0.1483 - val_accuracy: 0.9568\n","Epoch 196/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0870 - accuracy: 0.9688 - val_loss: 0.1768 - val_accuracy: 0.9474\n","Epoch 197/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0879 - accuracy: 0.9684 - val_loss: 0.1537 - val_accuracy: 0.9548\n","Epoch 198/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0875 - accuracy: 0.9685 - val_loss: 0.1534 - val_accuracy: 0.9542\n","Epoch 199/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0881 - accuracy: 0.9685 - val_loss: 0.1605 - val_accuracy: 0.9520\n","Epoch 200/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0905 - accuracy: 0.9676 - val_loss: 0.1465 - val_accuracy: 0.9569\n","Epoch 201/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0899 - accuracy: 0.9678 - val_loss: 0.1567 - val_accuracy: 0.9541\n","Epoch 202/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0877 - accuracy: 0.9686 - val_loss: 0.1637 - val_accuracy: 0.9515\n","Epoch 203/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0864 - accuracy: 0.9689 - val_loss: 0.1491 - val_accuracy: 0.9559\n","Epoch 204/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0838 - accuracy: 0.9698 - val_loss: 0.1645 - val_accuracy: 0.9526\n","Epoch 205/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0821 - accuracy: 0.9703 - val_loss: 0.1461 - val_accuracy: 0.9580\n","Epoch 206/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0822 - accuracy: 0.9702 - val_loss: 0.1501 - val_accuracy: 0.9556\n","Epoch 207/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0841 - accuracy: 0.9695 - val_loss: 0.1479 - val_accuracy: 0.9565\n","Epoch 208/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0837 - accuracy: 0.9698 - val_loss: 0.1473 - val_accuracy: 0.9567\n","Epoch 209/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0879 - accuracy: 0.9685 - val_loss: 0.1520 - val_accuracy: 0.9545\n","Epoch 210/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0855 - accuracy: 0.9693 - val_loss: 0.1491 - val_accuracy: 0.9563\n","Epoch 211/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0835 - accuracy: 0.9698 - val_loss: 0.1447 - val_accuracy: 0.9578\n","Epoch 212/500\n","10/10 [==============================] - 2s 165ms/step - loss: 0.0863 - accuracy: 0.9688 - val_loss: 0.1843 - val_accuracy: 0.9468\n","Epoch 213/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0867 - accuracy: 0.9689 - val_loss: 0.1562 - val_accuracy: 0.9526\n","Epoch 214/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0897 - accuracy: 0.9679 - val_loss: 0.1531 - val_accuracy: 0.9541\n","Epoch 215/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0862 - accuracy: 0.9689 - val_loss: 0.1523 - val_accuracy: 0.9549\n","Epoch 216/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0852 - accuracy: 0.9692 - val_loss: 0.1451 - val_accuracy: 0.9574\n","Epoch 217/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0838 - accuracy: 0.9698 - val_loss: 0.1498 - val_accuracy: 0.9566\n","Epoch 218/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0820 - accuracy: 0.9704 - val_loss: 0.1439 - val_accuracy: 0.9570\n","Epoch 219/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0880 - accuracy: 0.9685 - val_loss: 0.1562 - val_accuracy: 0.9533\n","Epoch 220/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0885 - accuracy: 0.9683 - val_loss: 0.1553 - val_accuracy: 0.9540\n","Epoch 221/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0843 - accuracy: 0.9698 - val_loss: 0.1479 - val_accuracy: 0.9564\n","Epoch 222/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0817 - accuracy: 0.9704 - val_loss: 0.1444 - val_accuracy: 0.9578\n","Epoch 223/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0824 - accuracy: 0.9704 - val_loss: 0.1380 - val_accuracy: 0.9599\n","Epoch 224/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0790 - accuracy: 0.9714 - val_loss: 0.1459 - val_accuracy: 0.9575\n","Epoch 225/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0806 - accuracy: 0.9710 - val_loss: 0.1497 - val_accuracy: 0.9579\n","Epoch 226/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0785 - accuracy: 0.9717 - val_loss: 0.1430 - val_accuracy: 0.9586\n","Epoch 227/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0773 - accuracy: 0.9719 - val_loss: 0.1520 - val_accuracy: 0.9553\n","Epoch 228/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0764 - accuracy: 0.9723 - val_loss: 0.1356 - val_accuracy: 0.9607\n","Epoch 229/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0748 - accuracy: 0.9728 - val_loss: 0.1395 - val_accuracy: 0.9595\n","Epoch 230/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0772 - accuracy: 0.9720 - val_loss: 0.1380 - val_accuracy: 0.9594\n","Epoch 231/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0765 - accuracy: 0.9722 - val_loss: 0.1423 - val_accuracy: 0.9586\n","Epoch 232/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0760 - accuracy: 0.9722 - val_loss: 0.1443 - val_accuracy: 0.9589\n","Epoch 233/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0790 - accuracy: 0.9713 - val_loss: 0.1536 - val_accuracy: 0.9562\n","Epoch 234/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0797 - accuracy: 0.9708 - val_loss: 0.1507 - val_accuracy: 0.9565\n","Epoch 235/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0763 - accuracy: 0.9721 - val_loss: 0.1462 - val_accuracy: 0.9584\n","Epoch 236/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0868 - accuracy: 0.9698 - val_loss: 0.1726 - val_accuracy: 0.9505\n","Epoch 237/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0871 - accuracy: 0.9689 - val_loss: 0.1655 - val_accuracy: 0.9495\n","Epoch 238/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0822 - accuracy: 0.9702 - val_loss: 0.1494 - val_accuracy: 0.9575\n","Epoch 239/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0786 - accuracy: 0.9715 - val_loss: 0.1371 - val_accuracy: 0.9602\n","Epoch 240/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0767 - accuracy: 0.9721 - val_loss: 0.1500 - val_accuracy: 0.9570\n","Epoch 241/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0787 - accuracy: 0.9715 - val_loss: 0.1441 - val_accuracy: 0.9580\n","Epoch 242/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0772 - accuracy: 0.9718 - val_loss: 0.1385 - val_accuracy: 0.9603\n","Epoch 243/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0778 - accuracy: 0.9716 - val_loss: 0.1493 - val_accuracy: 0.9564\n","Epoch 244/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0771 - accuracy: 0.9719 - val_loss: 0.1554 - val_accuracy: 0.9552\n","Epoch 245/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0757 - accuracy: 0.9723 - val_loss: 0.1399 - val_accuracy: 0.9596\n","Epoch 246/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0756 - accuracy: 0.9725 - val_loss: 0.1423 - val_accuracy: 0.9587\n","Epoch 247/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0739 - accuracy: 0.9730 - val_loss: 0.1532 - val_accuracy: 0.9559\n","Epoch 248/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0743 - accuracy: 0.9728 - val_loss: 0.1358 - val_accuracy: 0.9609\n","Epoch 249/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0708 - accuracy: 0.9740 - val_loss: 0.1366 - val_accuracy: 0.9611\n","Epoch 250/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0718 - accuracy: 0.9738 - val_loss: 0.1371 - val_accuracy: 0.9600\n","Epoch 251/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0725 - accuracy: 0.9733 - val_loss: 0.1389 - val_accuracy: 0.9597\n","Epoch 252/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0731 - accuracy: 0.9732 - val_loss: 0.1352 - val_accuracy: 0.9614\n","Epoch 253/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0722 - accuracy: 0.9735 - val_loss: 0.1315 - val_accuracy: 0.9617\n","Epoch 254/500\n","10/10 [==============================] - 2s 192ms/step - loss: 0.0741 - accuracy: 0.9729 - val_loss: 0.1339 - val_accuracy: 0.9612\n","Epoch 255/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0725 - accuracy: 0.9734 - val_loss: 0.1348 - val_accuracy: 0.9605\n","Epoch 256/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0710 - accuracy: 0.9739 - val_loss: 0.1374 - val_accuracy: 0.9607\n","Epoch 257/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0818 - accuracy: 0.9707 - val_loss: 0.1745 - val_accuracy: 0.9532\n","Epoch 258/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0876 - accuracy: 0.9686 - val_loss: 0.1761 - val_accuracy: 0.9518\n","Epoch 259/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0832 - accuracy: 0.9700 - val_loss: 0.1516 - val_accuracy: 0.9554\n","Epoch 260/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0769 - accuracy: 0.9720 - val_loss: 0.1495 - val_accuracy: 0.9578\n","Epoch 261/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0742 - accuracy: 0.9729 - val_loss: 0.1501 - val_accuracy: 0.9563\n","Epoch 262/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0730 - accuracy: 0.9732 - val_loss: 0.1354 - val_accuracy: 0.9601\n","Epoch 263/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0719 - accuracy: 0.9737 - val_loss: 0.1296 - val_accuracy: 0.9628\n","Epoch 264/500\n","10/10 [==============================] - 2s 165ms/step - loss: 0.0702 - accuracy: 0.9743 - val_loss: 0.1420 - val_accuracy: 0.9592\n","Epoch 265/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0699 - accuracy: 0.9744 - val_loss: 0.1366 - val_accuracy: 0.9620\n","Epoch 266/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0696 - accuracy: 0.9744 - val_loss: 0.1388 - val_accuracy: 0.9603\n","Epoch 267/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0689 - accuracy: 0.9747 - val_loss: 0.1361 - val_accuracy: 0.9615\n","Epoch 268/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0685 - accuracy: 0.9748 - val_loss: 0.1338 - val_accuracy: 0.9620\n","Epoch 269/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0702 - accuracy: 0.9742 - val_loss: 0.1407 - val_accuracy: 0.9591\n","Epoch 270/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0699 - accuracy: 0.9744 - val_loss: 0.1395 - val_accuracy: 0.9602\n","Epoch 271/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0686 - accuracy: 0.9748 - val_loss: 0.1345 - val_accuracy: 0.9625\n","Epoch 272/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0690 - accuracy: 0.9746 - val_loss: 0.1494 - val_accuracy: 0.9586\n","Epoch 273/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0674 - accuracy: 0.9752 - val_loss: 0.1370 - val_accuracy: 0.9626\n","Epoch 274/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0653 - accuracy: 0.9759 - val_loss: 0.1323 - val_accuracy: 0.9632\n","Epoch 275/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0650 - accuracy: 0.9759 - val_loss: 0.1428 - val_accuracy: 0.9614\n","Epoch 276/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0662 - accuracy: 0.9756 - val_loss: 0.1372 - val_accuracy: 0.9621\n","Epoch 277/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0662 - accuracy: 0.9755 - val_loss: 0.1367 - val_accuracy: 0.9615\n","Epoch 278/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0661 - accuracy: 0.9756 - val_loss: 0.1401 - val_accuracy: 0.9622\n","Epoch 279/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0647 - accuracy: 0.9761 - val_loss: 0.1323 - val_accuracy: 0.9631\n","Epoch 280/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0632 - accuracy: 0.9767 - val_loss: 0.1404 - val_accuracy: 0.9616\n","Epoch 281/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0634 - accuracy: 0.9765 - val_loss: 0.1372 - val_accuracy: 0.9632\n","Epoch 282/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0640 - accuracy: 0.9763 - val_loss: 0.1432 - val_accuracy: 0.9619\n","Epoch 283/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0659 - accuracy: 0.9757 - val_loss: 0.1478 - val_accuracy: 0.9599\n","Epoch 284/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0643 - accuracy: 0.9763 - val_loss: 0.1331 - val_accuracy: 0.9632\n","Epoch 285/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0632 - accuracy: 0.9767 - val_loss: 0.1634 - val_accuracy: 0.9552\n","Epoch 286/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0627 - accuracy: 0.9768 - val_loss: 0.1329 - val_accuracy: 0.9634\n","Epoch 287/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0623 - accuracy: 0.9768 - val_loss: 0.1349 - val_accuracy: 0.9631\n","Epoch 288/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0617 - accuracy: 0.9771 - val_loss: 0.1401 - val_accuracy: 0.9630\n","Epoch 289/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0612 - accuracy: 0.9772 - val_loss: 0.1360 - val_accuracy: 0.9632\n","Epoch 290/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0612 - accuracy: 0.9772 - val_loss: 0.1377 - val_accuracy: 0.9632\n","Epoch 291/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0623 - accuracy: 0.9769 - val_loss: 0.1368 - val_accuracy: 0.9637\n","Epoch 292/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0644 - accuracy: 0.9761 - val_loss: 0.1333 - val_accuracy: 0.9637\n","Epoch 293/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0643 - accuracy: 0.9761 - val_loss: 0.1374 - val_accuracy: 0.9625\n","Epoch 294/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0680 - accuracy: 0.9749 - val_loss: 0.1434 - val_accuracy: 0.9611\n","Epoch 295/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.0680 - accuracy: 0.9747 - val_loss: 0.1516 - val_accuracy: 0.9593\n","Epoch 296/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0632 - accuracy: 0.9766 - val_loss: 0.1336 - val_accuracy: 0.9636\n","Epoch 297/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0612 - accuracy: 0.9773 - val_loss: 0.1316 - val_accuracy: 0.9643\n","Epoch 298/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0611 - accuracy: 0.9773 - val_loss: 0.1350 - val_accuracy: 0.9635\n","Epoch 299/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0617 - accuracy: 0.9769 - val_loss: 0.1410 - val_accuracy: 0.9613\n","Epoch 300/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0718 - accuracy: 0.9735 - val_loss: 0.1393 - val_accuracy: 0.9615\n","Epoch 301/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0676 - accuracy: 0.9749 - val_loss: 0.1383 - val_accuracy: 0.9604\n","Epoch 302/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0649 - accuracy: 0.9761 - val_loss: 0.1359 - val_accuracy: 0.9630\n","Epoch 303/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0623 - accuracy: 0.9769 - val_loss: 0.1344 - val_accuracy: 0.9633\n","Epoch 304/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0621 - accuracy: 0.9769 - val_loss: 0.1380 - val_accuracy: 0.9627\n","Epoch 305/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0613 - accuracy: 0.9773 - val_loss: 0.1336 - val_accuracy: 0.9643\n","Epoch 306/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0600 - accuracy: 0.9776 - val_loss: 0.1309 - val_accuracy: 0.9653\n","Epoch 307/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0605 - accuracy: 0.9774 - val_loss: 0.1283 - val_accuracy: 0.9649\n","Epoch 308/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0608 - accuracy: 0.9773 - val_loss: 0.1377 - val_accuracy: 0.9629\n","Epoch 309/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0609 - accuracy: 0.9773 - val_loss: 0.1408 - val_accuracy: 0.9626\n","Epoch 310/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0593 - accuracy: 0.9779 - val_loss: 0.1366 - val_accuracy: 0.9640\n","Epoch 311/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0603 - accuracy: 0.9776 - val_loss: 0.1427 - val_accuracy: 0.9632\n","Epoch 312/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0617 - accuracy: 0.9769 - val_loss: 0.1375 - val_accuracy: 0.9629\n","Epoch 313/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0602 - accuracy: 0.9775 - val_loss: 0.1320 - val_accuracy: 0.9641\n","Epoch 314/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0594 - accuracy: 0.9777 - val_loss: 0.1363 - val_accuracy: 0.9641\n","Epoch 315/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0585 - accuracy: 0.9782 - val_loss: 0.1363 - val_accuracy: 0.9643\n","Epoch 316/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0575 - accuracy: 0.9785 - val_loss: 0.1338 - val_accuracy: 0.9644\n","Epoch 317/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0569 - accuracy: 0.9787 - val_loss: 0.1313 - val_accuracy: 0.9649\n","Epoch 318/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0584 - accuracy: 0.9782 - val_loss: 0.1384 - val_accuracy: 0.9638\n","Epoch 319/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0576 - accuracy: 0.9784 - val_loss: 0.1360 - val_accuracy: 0.9643\n","Epoch 320/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0570 - accuracy: 0.9787 - val_loss: 0.1366 - val_accuracy: 0.9636\n","Epoch 321/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0574 - accuracy: 0.9786 - val_loss: 0.1405 - val_accuracy: 0.9630\n","Epoch 322/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0576 - accuracy: 0.9784 - val_loss: 0.1319 - val_accuracy: 0.9646\n","Epoch 323/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0574 - accuracy: 0.9785 - val_loss: 0.1308 - val_accuracy: 0.9659\n","Epoch 324/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0561 - accuracy: 0.9789 - val_loss: 0.1370 - val_accuracy: 0.9647\n","Epoch 325/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0554 - accuracy: 0.9792 - val_loss: 0.1392 - val_accuracy: 0.9637\n","Epoch 326/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0584 - accuracy: 0.9780 - val_loss: 0.1383 - val_accuracy: 0.9645\n","Epoch 327/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0590 - accuracy: 0.9777 - val_loss: 0.1492 - val_accuracy: 0.9615\n","Epoch 328/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0608 - accuracy: 0.9773 - val_loss: 0.1404 - val_accuracy: 0.9633\n","Epoch 329/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0587 - accuracy: 0.9780 - val_loss: 0.1354 - val_accuracy: 0.9638\n","Epoch 330/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0589 - accuracy: 0.9779 - val_loss: 0.1385 - val_accuracy: 0.9638\n","Epoch 331/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0629 - accuracy: 0.9766 - val_loss: 0.1328 - val_accuracy: 0.9639\n","Epoch 332/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0598 - accuracy: 0.9776 - val_loss: 0.1296 - val_accuracy: 0.9645\n","Epoch 333/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0585 - accuracy: 0.9781 - val_loss: 0.1339 - val_accuracy: 0.9640\n","Epoch 334/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0601 - accuracy: 0.9775 - val_loss: 0.1431 - val_accuracy: 0.9615\n","Epoch 335/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0635 - accuracy: 0.9762 - val_loss: 0.1597 - val_accuracy: 0.9584\n","Epoch 336/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0645 - accuracy: 0.9761 - val_loss: 0.1436 - val_accuracy: 0.9619\n","Epoch 337/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0646 - accuracy: 0.9760 - val_loss: 0.1424 - val_accuracy: 0.9615\n","Epoch 338/500\n","10/10 [==============================] - 2s 172ms/step - loss: 0.0613 - accuracy: 0.9772 - val_loss: 0.1355 - val_accuracy: 0.9638\n","Epoch 339/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0577 - accuracy: 0.9784 - val_loss: 0.1347 - val_accuracy: 0.9647\n","Epoch 340/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0580 - accuracy: 0.9782 - val_loss: 0.1274 - val_accuracy: 0.9659\n","Epoch 341/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0555 - accuracy: 0.9792 - val_loss: 0.1326 - val_accuracy: 0.9648\n","Epoch 342/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0561 - accuracy: 0.9789 - val_loss: 0.1305 - val_accuracy: 0.9657\n","Epoch 343/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0553 - accuracy: 0.9792 - val_loss: 0.1338 - val_accuracy: 0.9649\n","Epoch 344/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0551 - accuracy: 0.9793 - val_loss: 0.1293 - val_accuracy: 0.9662\n","Epoch 345/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0538 - accuracy: 0.9797 - val_loss: 0.1327 - val_accuracy: 0.9657\n","Epoch 346/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0535 - accuracy: 0.9798 - val_loss: 0.1297 - val_accuracy: 0.9666\n","Epoch 347/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0547 - accuracy: 0.9794 - val_loss: 0.1379 - val_accuracy: 0.9646\n","Epoch 348/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0886 - accuracy: 0.9708 - val_loss: 0.2856 - val_accuracy: 0.9308\n","Epoch 349/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1081 - accuracy: 0.9637 - val_loss: 0.2101 - val_accuracy: 0.9376\n","Epoch 350/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0948 - accuracy: 0.9663 - val_loss: 0.1714 - val_accuracy: 0.9497\n","Epoch 351/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0808 - accuracy: 0.9709 - val_loss: 0.1474 - val_accuracy: 0.9560\n","Epoch 352/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0687 - accuracy: 0.9746 - val_loss: 0.1287 - val_accuracy: 0.9634\n","Epoch 353/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0659 - accuracy: 0.9756 - val_loss: 0.7049 - val_accuracy: 0.8724\n","Epoch 354/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0677 - accuracy: 0.9750 - val_loss: 0.1783 - val_accuracy: 0.9505\n","Epoch 355/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0657 - accuracy: 0.9757 - val_loss: 0.1302 - val_accuracy: 0.9649\n","Epoch 356/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0611 - accuracy: 0.9772 - val_loss: 0.1288 - val_accuracy: 0.9652\n","Epoch 357/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0589 - accuracy: 0.9780 - val_loss: 0.1276 - val_accuracy: 0.9649\n","Epoch 358/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0585 - accuracy: 0.9780 - val_loss: 0.1264 - val_accuracy: 0.9658\n","Epoch 359/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0567 - accuracy: 0.9787 - val_loss: 0.1252 - val_accuracy: 0.9666\n","Epoch 360/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0542 - accuracy: 0.9796 - val_loss: 0.1293 - val_accuracy: 0.9659\n","Epoch 361/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0554 - accuracy: 0.9791 - val_loss: 0.1257 - val_accuracy: 0.9667\n","Epoch 362/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0543 - accuracy: 0.9795 - val_loss: 0.1308 - val_accuracy: 0.9661\n","Epoch 363/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0554 - accuracy: 0.9791 - val_loss: 0.1268 - val_accuracy: 0.9671\n","Epoch 364/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0546 - accuracy: 0.9794 - val_loss: 0.1275 - val_accuracy: 0.9669\n","Epoch 365/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0542 - accuracy: 0.9796 - val_loss: 0.1262 - val_accuracy: 0.9669\n","Epoch 366/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0523 - accuracy: 0.9803 - val_loss: 0.1259 - val_accuracy: 0.9668\n","Epoch 367/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0516 - accuracy: 0.9806 - val_loss: 0.1292 - val_accuracy: 0.9673\n","Epoch 368/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0509 - accuracy: 0.9808 - val_loss: 0.1247 - val_accuracy: 0.9679\n","Epoch 369/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0507 - accuracy: 0.9809 - val_loss: 0.1285 - val_accuracy: 0.9674\n","Epoch 370/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.0498 - accuracy: 0.9812 - val_loss: 0.1312 - val_accuracy: 0.9671\n","Epoch 371/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0501 - accuracy: 0.9810 - val_loss: 0.1283 - val_accuracy: 0.9676\n","Epoch 372/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0503 - accuracy: 0.9810 - val_loss: 0.1312 - val_accuracy: 0.9671\n","Epoch 373/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0513 - accuracy: 0.9806 - val_loss: 0.1305 - val_accuracy: 0.9672\n","Epoch 374/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0505 - accuracy: 0.9808 - val_loss: 0.1282 - val_accuracy: 0.9670\n","Epoch 375/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0502 - accuracy: 0.9810 - val_loss: 0.1334 - val_accuracy: 0.9660\n","Epoch 376/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0497 - accuracy: 0.9811 - val_loss: 0.1316 - val_accuracy: 0.9668\n","Epoch 377/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0501 - accuracy: 0.9810 - val_loss: 0.1316 - val_accuracy: 0.9674\n","Epoch 378/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0508 - accuracy: 0.9808 - val_loss: 0.1279 - val_accuracy: 0.9674\n","Epoch 379/500\n","10/10 [==============================] - 2s 172ms/step - loss: 0.0489 - accuracy: 0.9815 - val_loss: 0.1301 - val_accuracy: 0.9676\n","Epoch 380/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0493 - accuracy: 0.9813 - val_loss: 0.1265 - val_accuracy: 0.9677\n","Epoch 381/500\n","10/10 [==============================] - 2s 172ms/step - loss: 0.0514 - accuracy: 0.9805 - val_loss: 0.1418 - val_accuracy: 0.9629\n","Epoch 382/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0512 - accuracy: 0.9806 - val_loss: 0.1281 - val_accuracy: 0.9677\n","Epoch 383/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0501 - accuracy: 0.9810 - val_loss: 0.1304 - val_accuracy: 0.9672\n","Epoch 384/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0489 - accuracy: 0.9815 - val_loss: 0.1235 - val_accuracy: 0.9682\n","Epoch 385/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0483 - accuracy: 0.9816 - val_loss: 0.1280 - val_accuracy: 0.9680\n","Epoch 386/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.0477 - accuracy: 0.9819 - val_loss: 0.1267 - val_accuracy: 0.9684\n","Epoch 387/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.0482 - accuracy: 0.9817 - val_loss: 0.1258 - val_accuracy: 0.9687\n","Epoch 388/500\n","10/10 [==============================] - 2s 172ms/step - loss: 0.0491 - accuracy: 0.9813 - val_loss: 0.1313 - val_accuracy: 0.9665\n","Epoch 389/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0501 - accuracy: 0.9809 - val_loss: 0.1251 - val_accuracy: 0.9677\n","Epoch 390/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0487 - accuracy: 0.9815 - val_loss: 0.1290 - val_accuracy: 0.9676\n","Epoch 391/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0498 - accuracy: 0.9810 - val_loss: 0.1275 - val_accuracy: 0.9680\n","Epoch 392/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0483 - accuracy: 0.9816 - val_loss: 0.1317 - val_accuracy: 0.9675\n","Epoch 393/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0483 - accuracy: 0.9817 - val_loss: 0.1320 - val_accuracy: 0.9673\n","Epoch 394/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0489 - accuracy: 0.9814 - val_loss: 0.1318 - val_accuracy: 0.9669\n","Epoch 395/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0492 - accuracy: 0.9813 - val_loss: 0.1275 - val_accuracy: 0.9677\n","Epoch 396/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0500 - accuracy: 0.9809 - val_loss: 0.1252 - val_accuracy: 0.9678\n","Epoch 397/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0502 - accuracy: 0.9809 - val_loss: 0.1327 - val_accuracy: 0.9665\n","Epoch 398/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0500 - accuracy: 0.9810 - val_loss: 0.1322 - val_accuracy: 0.9667\n","Epoch 399/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0502 - accuracy: 0.9808 - val_loss: 0.1330 - val_accuracy: 0.9671\n","Epoch 400/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0516 - accuracy: 0.9802 - val_loss: 0.1325 - val_accuracy: 0.9664\n","Epoch 401/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0513 - accuracy: 0.9806 - val_loss: 0.1348 - val_accuracy: 0.9660\n","Epoch 402/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0502 - accuracy: 0.9809 - val_loss: 0.1299 - val_accuracy: 0.9674\n","Epoch 403/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0492 - accuracy: 0.9814 - val_loss: 0.1298 - val_accuracy: 0.9664\n","Epoch 404/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0490 - accuracy: 0.9813 - val_loss: 0.1362 - val_accuracy: 0.9658\n","Epoch 405/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0478 - accuracy: 0.9817 - val_loss: 0.1292 - val_accuracy: 0.9682\n","Epoch 406/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0476 - accuracy: 0.9819 - val_loss: 0.1292 - val_accuracy: 0.9676\n","Epoch 407/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.0865 - accuracy: 0.9712 - val_loss: 0.3833 - val_accuracy: 0.9078\n","Epoch 408/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0905 - accuracy: 0.9688 - val_loss: 0.1909 - val_accuracy: 0.9429\n","Epoch 409/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0774 - accuracy: 0.9721 - val_loss: 0.1640 - val_accuracy: 0.9553\n","Epoch 410/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0665 - accuracy: 0.9754 - val_loss: 0.1349 - val_accuracy: 0.9628\n","Epoch 411/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0718 - accuracy: 0.9739 - val_loss: 0.1943 - val_accuracy: 0.9497\n","Epoch 412/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1407 - accuracy: 0.9545 - val_loss: 0.5346 - val_accuracy: 0.8746\n","Epoch 413/500\n","10/10 [==============================] - 2s 172ms/step - loss: 0.1789 - accuracy: 0.9435 - val_loss: 0.6947 - val_accuracy: 0.8731\n","Epoch 414/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.2082 - accuracy: 0.9332 - val_loss: 3.9638 - val_accuracy: 0.5574\n","Epoch 415/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.1920 - accuracy: 0.9382 - val_loss: 0.7924 - val_accuracy: 0.8615\n","Epoch 416/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.1492 - accuracy: 0.9513 - val_loss: 0.4742 - val_accuracy: 0.8929\n","Epoch 417/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1139 - accuracy: 0.9609 - val_loss: 0.2051 - val_accuracy: 0.9437\n","Epoch 418/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1043 - accuracy: 0.9634 - val_loss: 0.5007 - val_accuracy: 0.8962\n","Epoch 419/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1030 - accuracy: 0.9636 - val_loss: 0.3231 - val_accuracy: 0.9273\n","Epoch 420/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0940 - accuracy: 0.9666 - val_loss: 0.1713 - val_accuracy: 0.9513\n","Epoch 421/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0805 - accuracy: 0.9710 - val_loss: 0.1524 - val_accuracy: 0.9550\n","Epoch 422/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0731 - accuracy: 0.9733 - val_loss: 0.1355 - val_accuracy: 0.9598\n","Epoch 423/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0691 - accuracy: 0.9745 - val_loss: 0.1273 - val_accuracy: 0.9640\n","Epoch 424/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0646 - accuracy: 0.9761 - val_loss: 0.1282 - val_accuracy: 0.9641\n","Epoch 425/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0635 - accuracy: 0.9765 - val_loss: 0.1229 - val_accuracy: 0.9652\n","Epoch 426/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0605 - accuracy: 0.9775 - val_loss: 0.1250 - val_accuracy: 0.9648\n","Epoch 427/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0599 - accuracy: 0.9777 - val_loss: 0.1258 - val_accuracy: 0.9643\n","Epoch 428/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0585 - accuracy: 0.9781 - val_loss: 0.1204 - val_accuracy: 0.9663\n","Epoch 429/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0571 - accuracy: 0.9787 - val_loss: 0.1240 - val_accuracy: 0.9664\n","Epoch 430/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0601 - accuracy: 0.9776 - val_loss: 0.1707 - val_accuracy: 0.9523\n","Epoch 431/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.0575 - accuracy: 0.9784 - val_loss: 0.1347 - val_accuracy: 0.9635\n","Epoch 432/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0571 - accuracy: 0.9786 - val_loss: 0.1302 - val_accuracy: 0.9647\n","Epoch 433/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0555 - accuracy: 0.9792 - val_loss: 0.1214 - val_accuracy: 0.9662\n","Epoch 434/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0537 - accuracy: 0.9798 - val_loss: 0.1273 - val_accuracy: 0.9662\n","Epoch 435/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0554 - accuracy: 0.9792 - val_loss: 0.1308 - val_accuracy: 0.9640\n","Epoch 436/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0558 - accuracy: 0.9790 - val_loss: 0.1281 - val_accuracy: 0.9658\n","Epoch 437/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0534 - accuracy: 0.9798 - val_loss: 0.1237 - val_accuracy: 0.9664\n","Epoch 438/500\n","10/10 [==============================] - 2s 166ms/step - loss: 0.0538 - accuracy: 0.9796 - val_loss: 0.1219 - val_accuracy: 0.9679\n","Epoch 439/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0522 - accuracy: 0.9803 - val_loss: 0.1264 - val_accuracy: 0.9671\n","Epoch 440/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0519 - accuracy: 0.9804 - val_loss: 0.1258 - val_accuracy: 0.9671\n","Epoch 441/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0504 - accuracy: 0.9809 - val_loss: 0.1235 - val_accuracy: 0.9679\n","Epoch 442/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.0494 - accuracy: 0.9813 - val_loss: 0.1232 - val_accuracy: 0.9679\n","Epoch 443/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0510 - accuracy: 0.9810 - val_loss: 0.1278 - val_accuracy: 0.9672\n","Epoch 444/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0521 - accuracy: 0.9803 - val_loss: 0.1276 - val_accuracy: 0.9670\n","Epoch 445/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0517 - accuracy: 0.9804 - val_loss: 0.1240 - val_accuracy: 0.9678\n","Epoch 446/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0490 - accuracy: 0.9814 - val_loss: 0.1216 - val_accuracy: 0.9684\n","Epoch 447/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0509 - accuracy: 0.9808 - val_loss: 0.1277 - val_accuracy: 0.9673\n","Epoch 448/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0505 - accuracy: 0.9809 - val_loss: 0.1233 - val_accuracy: 0.9677\n","Epoch 449/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0487 - accuracy: 0.9817 - val_loss: 0.1276 - val_accuracy: 0.9679\n","Epoch 450/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0477 - accuracy: 0.9819 - val_loss: 0.1236 - val_accuracy: 0.9690\n","Epoch 451/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0468 - accuracy: 0.9823 - val_loss: 0.1216 - val_accuracy: 0.9695\n","Epoch 452/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0494 - accuracy: 0.9812 - val_loss: 0.1261 - val_accuracy: 0.9675\n","Epoch 453/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0487 - accuracy: 0.9815 - val_loss: 0.1164 - val_accuracy: 0.9692\n","Epoch 454/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0479 - accuracy: 0.9818 - val_loss: 0.1249 - val_accuracy: 0.9685\n","Epoch 455/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0468 - accuracy: 0.9822 - val_loss: 0.1212 - val_accuracy: 0.9692\n","Epoch 456/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0460 - accuracy: 0.9825 - val_loss: 0.1212 - val_accuracy: 0.9695\n","Epoch 457/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0466 - accuracy: 0.9823 - val_loss: 0.1233 - val_accuracy: 0.9688\n","Epoch 458/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0520 - accuracy: 0.9805 - val_loss: 0.1742 - val_accuracy: 0.9547\n","Epoch 459/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0516 - accuracy: 0.9804 - val_loss: 0.1287 - val_accuracy: 0.9669\n","Epoch 460/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.0539 - accuracy: 0.9793 - val_loss: 0.1302 - val_accuracy: 0.9655\n","Epoch 461/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.0506 - accuracy: 0.9807 - val_loss: 0.1190 - val_accuracy: 0.9682\n","Epoch 462/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.0489 - accuracy: 0.9815 - val_loss: 0.1225 - val_accuracy: 0.9692\n","Epoch 463/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0470 - accuracy: 0.9822 - val_loss: 0.1240 - val_accuracy: 0.9696\n","Epoch 464/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.0466 - accuracy: 0.9822 - val_loss: 0.1239 - val_accuracy: 0.9693\n","Epoch 465/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0469 - accuracy: 0.9822 - val_loss: 0.1262 - val_accuracy: 0.9689\n","Epoch 466/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0461 - accuracy: 0.9825 - val_loss: 0.1235 - val_accuracy: 0.9700\n","Epoch 467/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0450 - accuracy: 0.9829 - val_loss: 0.1225 - val_accuracy: 0.9700\n","Epoch 468/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0457 - accuracy: 0.9826 - val_loss: 0.1270 - val_accuracy: 0.9685\n","Epoch 469/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0455 - accuracy: 0.9827 - val_loss: 0.1221 - val_accuracy: 0.9693\n","Epoch 470/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0458 - accuracy: 0.9824 - val_loss: 0.1302 - val_accuracy: 0.9676\n","Epoch 471/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0459 - accuracy: 0.9824 - val_loss: 0.1247 - val_accuracy: 0.9689\n","Epoch 472/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0451 - accuracy: 0.9828 - val_loss: 0.1229 - val_accuracy: 0.9692\n","Epoch 473/500\n","10/10 [==============================] - 2s 172ms/step - loss: 0.0454 - accuracy: 0.9826 - val_loss: 0.1251 - val_accuracy: 0.9695\n","Epoch 474/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.0450 - accuracy: 0.9828 - val_loss: 0.1248 - val_accuracy: 0.9695\n","Epoch 475/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0452 - accuracy: 0.9828 - val_loss: 0.1209 - val_accuracy: 0.9699\n","Epoch 476/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0452 - accuracy: 0.9827 - val_loss: 0.1281 - val_accuracy: 0.9688\n","Epoch 477/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0468 - accuracy: 0.9822 - val_loss: 0.1271 - val_accuracy: 0.9681\n","Epoch 478/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0465 - accuracy: 0.9823 - val_loss: 0.1286 - val_accuracy: 0.9686\n","Epoch 479/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0468 - accuracy: 0.9821 - val_loss: 0.1257 - val_accuracy: 0.9681\n","Epoch 480/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0486 - accuracy: 0.9813 - val_loss: 0.1331 - val_accuracy: 0.9668\n","Epoch 481/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0476 - accuracy: 0.9819 - val_loss: 0.1259 - val_accuracy: 0.9685\n","Epoch 482/500\n","10/10 [==============================] - 2s 172ms/step - loss: 0.0459 - accuracy: 0.9825 - val_loss: 0.1244 - val_accuracy: 0.9689\n","Epoch 483/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0459 - accuracy: 0.9824 - val_loss: 0.1246 - val_accuracy: 0.9695\n","Epoch 484/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0448 - accuracy: 0.9828 - val_loss: 0.1210 - val_accuracy: 0.9697\n","Epoch 485/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0443 - accuracy: 0.9831 - val_loss: 0.1247 - val_accuracy: 0.9701\n","Epoch 486/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0434 - accuracy: 0.9834 - val_loss: 0.1220 - val_accuracy: 0.9706\n","Epoch 487/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0422 - accuracy: 0.9839 - val_loss: 0.1193 - val_accuracy: 0.9707\n","Epoch 488/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0426 - accuracy: 0.9837 - val_loss: 0.1214 - val_accuracy: 0.9705\n","Epoch 489/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0474 - accuracy: 0.9820 - val_loss: 0.1267 - val_accuracy: 0.9695\n","Epoch 490/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0487 - accuracy: 0.9815 - val_loss: 0.1335 - val_accuracy: 0.9686\n","Epoch 491/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.0480 - accuracy: 0.9817 - val_loss: 0.1245 - val_accuracy: 0.9688\n","Epoch 492/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0483 - accuracy: 0.9816 - val_loss: 0.1347 - val_accuracy: 0.9675\n","Epoch 493/500\n","10/10 [==============================] - 2s 167ms/step - loss: 0.0505 - accuracy: 0.9808 - val_loss: 0.1323 - val_accuracy: 0.9684\n","Epoch 494/500\n","10/10 [==============================] - 2s 171ms/step - loss: 0.0483 - accuracy: 0.9815 - val_loss: 0.1297 - val_accuracy: 0.9661\n","Epoch 495/500\n","10/10 [==============================] - 2s 170ms/step - loss: 0.0471 - accuracy: 0.9820 - val_loss: 0.1214 - val_accuracy: 0.9699\n","Epoch 496/500\n","10/10 [==============================] - 2s 165ms/step - loss: 0.0453 - accuracy: 0.9827 - val_loss: 0.1223 - val_accuracy: 0.9694\n","Epoch 497/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0434 - accuracy: 0.9834 - val_loss: 0.1249 - val_accuracy: 0.9697\n","Epoch 498/500\n","10/10 [==============================] - 2s 168ms/step - loss: 0.0425 - accuracy: 0.9837 - val_loss: 0.1209 - val_accuracy: 0.9703\n","Epoch 499/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0424 - accuracy: 0.9837 - val_loss: 0.1190 - val_accuracy: 0.9707\n","Epoch 500/500\n","10/10 [==============================] - 2s 169ms/step - loss: 0.0422 - accuracy: 0.9839 - val_loss: 0.1254 - val_accuracy: 0.9708\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f3c4d8ba518>"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"mQzLtZBsJ18h"},"source":["model.save('/content/gdrive/My Drive/good_gTruth/Models/model_1.h5')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HqWn00HqKxI7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1604660253517,"user_tz":-330,"elapsed":178719,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"e62d87c5-3ed9-49c5-904a-a695b4c6c430"},"source":["model_2 = unet_model(n_classes=6, im_sz=224, n_channels=7, n_filters_start=32, growth_factor=2, upconv=True,\n","               class_weights=[1.3453, 1.0000, 1.1585, 0.4894, 0.5044, 0.01])\n","\n","model_2.fit(X_train, Y_train, batch_size=16, epochs=100, shuffle=True,\n","                  validation_data=(X_val, Y_val))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/100\n"," 2/10 [=====>........................] - ETA: 1s - loss: 6.5817 - accuracy: 0.0170WARNING:tensorflow:Callbacks method `on_train_batch_end` is slow compared to the batch time (batch time: 0.0361s vs `on_train_batch_end` time: 0.1315s). Check your callbacks.\n","10/10 [==============================] - 2s 216ms/step - loss: 2.7122 - accuracy: 0.0234 - val_loss: 1.7139 - val_accuracy: 0.0150\n","Epoch 2/100\n","10/10 [==============================] - 2s 170ms/step - loss: 1.5796 - accuracy: 0.2493 - val_loss: 4.5564 - val_accuracy: 0.1206\n","Epoch 3/100\n","10/10 [==============================] - 2s 169ms/step - loss: 1.4095 - accuracy: 0.3585 - val_loss: 6.5230 - val_accuracy: 0.2351\n","Epoch 4/100\n","10/10 [==============================] - 2s 169ms/step - loss: 1.3494 - accuracy: 0.3623 - val_loss: 2.6588 - val_accuracy: 0.1348\n","Epoch 5/100\n","10/10 [==============================] - 2s 171ms/step - loss: 1.3141 - accuracy: 0.3665 - val_loss: 3.2833 - val_accuracy: 0.0516\n","Epoch 6/100\n","10/10 [==============================] - 2s 169ms/step - loss: 1.1376 - accuracy: 0.3695 - val_loss: 1.8386 - val_accuracy: 0.0445\n","Epoch 7/100\n","10/10 [==============================] - 2s 170ms/step - loss: 1.1136 - accuracy: 0.3686 - val_loss: 1.3268 - val_accuracy: 0.2282\n","Epoch 8/100\n","10/10 [==============================] - 2s 172ms/step - loss: 1.1095 - accuracy: 0.3715 - val_loss: 1.3203 - val_accuracy: 0.2379\n","Epoch 9/100\n","10/10 [==============================] - 2s 171ms/step - loss: 1.0918 - accuracy: 0.3712 - val_loss: 1.3354 - val_accuracy: 0.2421\n","Epoch 10/100\n","10/10 [==============================] - 2s 171ms/step - loss: 1.0833 - accuracy: 0.3750 - val_loss: 1.3052 - val_accuracy: 0.2406\n","Epoch 11/100\n","10/10 [==============================] - 2s 171ms/step - loss: 1.0555 - accuracy: 0.3845 - val_loss: 1.3002 - val_accuracy: 0.2611\n","Epoch 12/100\n","10/10 [==============================] - 2s 170ms/step - loss: 1.0452 - accuracy: 0.4009 - val_loss: 1.2495 - val_accuracy: 0.2878\n","Epoch 13/100\n","10/10 [==============================] - 2s 172ms/step - loss: 1.0411 - accuracy: 0.4215 - val_loss: 1.2596 - val_accuracy: 0.3014\n","Epoch 14/100\n","10/10 [==============================] - 2s 168ms/step - loss: 1.0354 - accuracy: 0.4376 - val_loss: 1.2666 - val_accuracy: 0.3437\n","Epoch 15/100\n","10/10 [==============================] - 2s 169ms/step - loss: 1.0196 - accuracy: 0.5277 - val_loss: 1.2330 - val_accuracy: 0.5754\n","Epoch 16/100\n","10/10 [==============================] - 2s 172ms/step - loss: 0.9168 - accuracy: 0.6830 - val_loss: 1.0171 - val_accuracy: 0.6076\n","Epoch 17/100\n","10/10 [==============================] - 2s 172ms/step - loss: 0.7640 - accuracy: 0.7019 - val_loss: 0.9359 - val_accuracy: 0.6139\n","Epoch 18/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.6964 - accuracy: 0.7019 - val_loss: 0.9590 - val_accuracy: 0.6108\n","Epoch 19/100\n","10/10 [==============================] - 2s 167ms/step - loss: 0.6482 - accuracy: 0.6870 - val_loss: 0.9981 - val_accuracy: 0.5935\n","Epoch 20/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.6305 - accuracy: 0.7138 - val_loss: 1.1040 - val_accuracy: 0.6246\n","Epoch 21/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.6232 - accuracy: 0.7273 - val_loss: 0.8525 - val_accuracy: 0.6574\n","Epoch 22/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.6201 - accuracy: 0.7443 - val_loss: 1.1175 - val_accuracy: 0.6269\n","Epoch 23/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.5710 - accuracy: 0.7484 - val_loss: 0.7880 - val_accuracy: 0.6701\n","Epoch 24/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.5751 - accuracy: 0.7445 - val_loss: 0.8538 - val_accuracy: 0.6146\n","Epoch 25/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.5945 - accuracy: 0.7342 - val_loss: 1.0060 - val_accuracy: 0.6308\n","Epoch 26/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.5419 - accuracy: 0.7649 - val_loss: 0.8196 - val_accuracy: 0.6586\n","Epoch 27/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.5471 - accuracy: 0.7541 - val_loss: 0.8313 - val_accuracy: 0.6742\n","Epoch 28/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.5191 - accuracy: 0.7714 - val_loss: 1.6626 - val_accuracy: 0.6057\n","Epoch 29/100\n","10/10 [==============================] - 2s 168ms/step - loss: 0.5164 - accuracy: 0.7736 - val_loss: 3.5799 - val_accuracy: 0.5801\n","Epoch 30/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.4953 - accuracy: 0.7730 - val_loss: 0.9627 - val_accuracy: 0.6490\n","Epoch 31/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.4964 - accuracy: 0.7929 - val_loss: 2.4288 - val_accuracy: 0.6043\n","Epoch 32/100\n","10/10 [==============================] - 2s 167ms/step - loss: 0.4840 - accuracy: 0.8063 - val_loss: 1.2944 - val_accuracy: 0.6677\n","Epoch 33/100\n","10/10 [==============================] - 2s 168ms/step - loss: 0.4669 - accuracy: 0.8084 - val_loss: 2.1378 - val_accuracy: 0.5830\n","Epoch 34/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.4404 - accuracy: 0.8021 - val_loss: 1.2134 - val_accuracy: 0.6608\n","Epoch 35/100\n","10/10 [==============================] - 2s 173ms/step - loss: 0.4393 - accuracy: 0.8199 - val_loss: 1.0528 - val_accuracy: 0.6678\n","Epoch 36/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.4288 - accuracy: 0.8396 - val_loss: 0.8121 - val_accuracy: 0.7091\n","Epoch 37/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.4201 - accuracy: 0.8393 - val_loss: 1.1884 - val_accuracy: 0.6418\n","Epoch 38/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.4098 - accuracy: 0.8434 - val_loss: 1.3538 - val_accuracy: 0.6369\n","Epoch 39/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.4178 - accuracy: 0.8659 - val_loss: 1.0212 - val_accuracy: 0.6892\n","Epoch 40/100\n","10/10 [==============================] - 2s 168ms/step - loss: 0.3866 - accuracy: 0.8815 - val_loss: 1.6320 - val_accuracy: 0.5972\n","Epoch 41/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.3808 - accuracy: 0.8801 - val_loss: 1.9122 - val_accuracy: 0.5057\n","Epoch 42/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.3932 - accuracy: 0.8712 - val_loss: 2.8280 - val_accuracy: 0.6112\n","Epoch 43/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.4088 - accuracy: 0.8619 - val_loss: 1.0501 - val_accuracy: 0.7105\n","Epoch 44/100\n","10/10 [==============================] - 2s 172ms/step - loss: 0.3831 - accuracy: 0.8738 - val_loss: 3.2574 - val_accuracy: 0.5749\n","Epoch 45/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.3866 - accuracy: 0.8712 - val_loss: 2.0495 - val_accuracy: 0.6612\n","Epoch 46/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.3465 - accuracy: 0.8857 - val_loss: 0.8812 - val_accuracy: 0.7752\n","Epoch 47/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.3136 - accuracy: 0.8962 - val_loss: 0.9748 - val_accuracy: 0.7443\n","Epoch 48/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.3020 - accuracy: 0.8992 - val_loss: 1.2320 - val_accuracy: 0.7156\n","Epoch 49/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.3120 - accuracy: 0.8952 - val_loss: 1.0356 - val_accuracy: 0.6992\n","Epoch 50/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.3003 - accuracy: 0.9017 - val_loss: 0.6608 - val_accuracy: 0.7945\n","Epoch 51/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.2862 - accuracy: 0.9060 - val_loss: 0.6031 - val_accuracy: 0.7924\n","Epoch 52/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.2831 - accuracy: 0.9077 - val_loss: 1.1222 - val_accuracy: 0.6910\n","Epoch 53/100\n","10/10 [==============================] - 2s 173ms/step - loss: 0.3013 - accuracy: 0.9001 - val_loss: 0.5497 - val_accuracy: 0.8134\n","Epoch 54/100\n","10/10 [==============================] - 2s 168ms/step - loss: 0.2816 - accuracy: 0.9069 - val_loss: 0.9074 - val_accuracy: 0.7672\n","Epoch 55/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.2592 - accuracy: 0.9155 - val_loss: 0.5305 - val_accuracy: 0.8259\n","Epoch 56/100\n","10/10 [==============================] - 2s 174ms/step - loss: 0.2478 - accuracy: 0.9184 - val_loss: 0.4770 - val_accuracy: 0.8380\n","Epoch 57/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.2366 - accuracy: 0.9223 - val_loss: 0.5057 - val_accuracy: 0.8253\n","Epoch 58/100\n","10/10 [==============================] - 2s 174ms/step - loss: 0.2505 - accuracy: 0.9179 - val_loss: 0.6756 - val_accuracy: 0.7846\n","Epoch 59/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.2447 - accuracy: 0.9182 - val_loss: 0.5114 - val_accuracy: 0.8383\n","Epoch 60/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.2448 - accuracy: 0.9192 - val_loss: 0.5925 - val_accuracy: 0.7997\n","Epoch 61/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.2308 - accuracy: 0.9238 - val_loss: 0.3930 - val_accuracy: 0.8635\n","Epoch 62/100\n","10/10 [==============================] - 2s 172ms/step - loss: 0.2208 - accuracy: 0.9274 - val_loss: 0.3493 - val_accuracy: 0.8847\n","Epoch 63/100\n","10/10 [==============================] - 2s 168ms/step - loss: 0.2314 - accuracy: 0.9239 - val_loss: 0.4574 - val_accuracy: 0.8472\n","Epoch 64/100\n","10/10 [==============================] - 2s 172ms/step - loss: 0.2231 - accuracy: 0.9270 - val_loss: 0.3322 - val_accuracy: 0.8904\n","Epoch 65/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.2386 - accuracy: 0.9226 - val_loss: 0.3503 - val_accuracy: 0.8867\n","Epoch 66/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.2611 - accuracy: 0.9168 - val_loss: 0.5525 - val_accuracy: 0.8170\n","Epoch 67/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.2834 - accuracy: 0.9090 - val_loss: 0.5961 - val_accuracy: 0.8467\n","Epoch 68/100\n","10/10 [==============================] - 2s 174ms/step - loss: 0.2346 - accuracy: 0.9256 - val_loss: 0.3828 - val_accuracy: 0.8673\n","Epoch 69/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.2374 - accuracy: 0.9224 - val_loss: 0.3527 - val_accuracy: 0.8831\n","Epoch 70/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.2304 - accuracy: 0.9248 - val_loss: 0.4022 - val_accuracy: 0.8731\n","Epoch 71/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.2237 - accuracy: 0.9270 - val_loss: 0.3831 - val_accuracy: 0.8716\n","Epoch 72/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.2127 - accuracy: 0.9313 - val_loss: 0.3410 - val_accuracy: 0.8895\n","Epoch 73/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.2075 - accuracy: 0.9318 - val_loss: 0.5354 - val_accuracy: 0.8198\n","Epoch 74/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.2456 - accuracy: 0.9207 - val_loss: 0.3379 - val_accuracy: 0.8906\n","Epoch 75/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.2243 - accuracy: 0.9270 - val_loss: 0.3968 - val_accuracy: 0.8758\n","Epoch 76/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.2034 - accuracy: 0.9327 - val_loss: 0.3289 - val_accuracy: 0.8905\n","Epoch 77/100\n","10/10 [==============================] - 2s 168ms/step - loss: 0.2171 - accuracy: 0.9293 - val_loss: 0.3749 - val_accuracy: 0.8799\n","Epoch 78/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.2057 - accuracy: 0.9319 - val_loss: 0.3438 - val_accuracy: 0.8929\n","Epoch 79/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.2004 - accuracy: 0.9339 - val_loss: 0.2831 - val_accuracy: 0.9058\n","Epoch 80/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.1833 - accuracy: 0.9399 - val_loss: 0.2957 - val_accuracy: 0.9057\n","Epoch 81/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1777 - accuracy: 0.9412 - val_loss: 0.2798 - val_accuracy: 0.9071\n","Epoch 82/100\n","10/10 [==============================] - 2s 172ms/step - loss: 0.1730 - accuracy: 0.9427 - val_loss: 0.2506 - val_accuracy: 0.9164\n","Epoch 83/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.1650 - accuracy: 0.9454 - val_loss: 0.2484 - val_accuracy: 0.9175\n","Epoch 84/100\n","10/10 [==============================] - 2s 172ms/step - loss: 0.1667 - accuracy: 0.9445 - val_loss: 0.2582 - val_accuracy: 0.9131\n","Epoch 85/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.1591 - accuracy: 0.9468 - val_loss: 0.2467 - val_accuracy: 0.9191\n","Epoch 86/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1572 - accuracy: 0.9470 - val_loss: 0.2383 - val_accuracy: 0.9205\n","Epoch 87/100\n","10/10 [==============================] - 2s 172ms/step - loss: 0.1518 - accuracy: 0.9489 - val_loss: 0.2411 - val_accuracy: 0.9205\n","Epoch 88/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.1744 - accuracy: 0.9416 - val_loss: 0.3637 - val_accuracy: 0.8760\n","Epoch 89/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.2075 - accuracy: 0.9306 - val_loss: 0.3340 - val_accuracy: 0.8910\n","Epoch 90/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.1837 - accuracy: 0.9391 - val_loss: 0.3322 - val_accuracy: 0.9020\n","Epoch 91/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.1781 - accuracy: 0.9403 - val_loss: 0.2811 - val_accuracy: 0.9070\n","Epoch 92/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.1679 - accuracy: 0.9448 - val_loss: 0.2536 - val_accuracy: 0.9167\n","Epoch 93/100\n","10/10 [==============================] - 2s 172ms/step - loss: 0.1714 - accuracy: 0.9432 - val_loss: 0.2585 - val_accuracy: 0.9146\n","Epoch 94/100\n","10/10 [==============================] - 2s 171ms/step - loss: 0.1601 - accuracy: 0.9464 - val_loss: 0.2319 - val_accuracy: 0.9226\n","Epoch 95/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1506 - accuracy: 0.9490 - val_loss: 0.2436 - val_accuracy: 0.9189\n","Epoch 96/100\n","10/10 [==============================] - 2s 168ms/step - loss: 0.1539 - accuracy: 0.9483 - val_loss: 0.2433 - val_accuracy: 0.9171\n","Epoch 97/100\n","10/10 [==============================] - 2s 172ms/step - loss: 0.1525 - accuracy: 0.9495 - val_loss: 0.2487 - val_accuracy: 0.9193\n","Epoch 98/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.1537 - accuracy: 0.9484 - val_loss: 0.2506 - val_accuracy: 0.9195\n","Epoch 99/100\n","10/10 [==============================] - 2s 169ms/step - loss: 0.1474 - accuracy: 0.9505 - val_loss: 0.2587 - val_accuracy: 0.9151\n","Epoch 100/100\n","10/10 [==============================] - 2s 170ms/step - loss: 0.1411 - accuracy: 0.9523 - val_loss: 0.2256 - val_accuracy: 0.9262\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f610b871e10>"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"markdown","metadata":{"id":"7W_SdpLWvN_g"},"source":["**FOR LOADING THE DATA:**\n","STEP 1"]},{"cell_type":"code","metadata":{"id":"wJUqG3vmEJw5"},"source":["from keras.models import Model\n","from keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D, concatenate, Conv2DTranspose, BatchNormalization, Dropout\n","from keras.optimizers import Adam\n","from keras.utils import plot_model\n","from keras import backend as K\n","def create_unet():\n","    droprate=0.25\n","    n_filters = 32\n","    inputs = Input((224, 224, 7))\n","    growth_factor = 2\n","    upconv = True\n","    n_classes = 6\n","    #inputs = BatchNormalization()(inputs)\n","    conv1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(inputs)\n","    conv1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv1)\n","    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)\n","    #pool1 = Dropout(droprate)(pool1)\n","\n","    n_filters *= growth_factor\n","    pool1 = BatchNormalization()(pool1)\n","    conv2 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool1)\n","    conv2 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv2)\n","    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)\n","    pool2 = Dropout(droprate)(pool2)\n","\n","    n_filters *= growth_factor\n","    pool2 = BatchNormalization()(pool2)\n","    conv3 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool2)\n","    conv3 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv3)\n","    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)\n","    pool3 = Dropout(droprate)(pool3)\n","\n","    n_filters *= growth_factor\n","    pool3 = BatchNormalization()(pool3)\n","    conv4_0 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool3)\n","    conv4_0 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv4_0)\n","    pool4_1 = MaxPooling2D(pool_size=(2, 2))(conv4_0)\n","    pool4_1 = Dropout(droprate)(pool4_1)\n","\n","    n_filters *= growth_factor\n","    pool4_1 = BatchNormalization()(pool4_1)\n","    conv4_1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool4_1)\n","    conv4_1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv4_1)\n","    pool4_2 = MaxPooling2D(pool_size=(2, 2))(conv4_1)\n","    pool4_2 = Dropout(droprate)(pool4_2)\n","\n","    n_filters *= growth_factor\n","    conv5 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool4_2)\n","    conv5 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv5)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up6_1 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv5), conv4_1])\n","    else:\n","        up6_1 = concatenate([UpSampling2D(size=(2, 2))(conv5), conv4_1])\n","    up6_1 = BatchNormalization()(up6_1)\n","    conv6_1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up6_1)\n","    conv6_1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv6_1)\n","    conv6_1 = Dropout(droprate)(conv6_1)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up6_2 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv6_1), conv4_0])\n","    else:\n","        up6_2 = concatenate([UpSampling2D(size=(2, 2))(conv6_1), conv4_0])\n","    up6_2 = BatchNormalization()(up6_2)\n","    conv6_2 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up6_2)\n","    conv6_2 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv6_2)\n","    conv6_2 = Dropout(droprate)(conv6_2)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up7 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv6_2), conv3])\n","    else:\n","        up7 = concatenate([UpSampling2D(size=(2, 2))(conv6_2), conv3])\n","    up7 = BatchNormalization()(up7)\n","    conv7 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up7)\n","    conv7 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv7)\n","    conv7 = Dropout(droprate)(conv7)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up8 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv7), conv2])\n","    else:\n","        up8 = concatenate([UpSampling2D(size=(2, 2))(conv7), conv2])\n","    up8 = BatchNormalization()(up8)\n","    conv8 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up8)\n","    conv8 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv8)\n","    conv8 = Dropout(droprate)(conv8)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up9 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv8), conv1])\n","    else:\n","        up9 = concatenate([UpSampling2D(size=(2, 2))(conv8), conv1])\n","    conv9 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up9)\n","    conv9 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv9)\n","\n","    conv10 = Conv2D(n_classes, (1, 1), activation='sigmoid')(conv9)\n","\n","    model = Model(inputs=inputs, outputs=conv10)\n","\n","    '''def weighted_binary_crossentropy(y_true, y_pred):\n","        class_loglosses = K.mean(K.binary_crossentropy(y_true, y_pred), axis=[0, 1, 2])\n","        return K.sum(class_loglosses * K.constant(class_weights))'''\n","\n","    model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])\n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HRVPYnJKvc4T"},"source":["**STEP 2:**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3MphBj7_lQFC","executionInfo":{"status":"ok","timestamp":1608272072741,"user_tz":-330,"elapsed":2090,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"77e521cd-2f6e-4238-e691-b6bc928afb7c"},"source":["import numpy as np\n","#original = ['Singh4_G4U2_Vol.jp2', 'Singh4_G4U2_Odd.jp2', 'Singh4_G4U2_Hlx.jp2', 'Singh4_G4U2_Dbl.jp2']\n","#original = ['TSVM_alpha_s1.jp2', 'TSVM_phi_s1.jp2', 'TSVM_psi1.jp2', 'TSVM_tau_m1.jp2']\n","#original = ['TSVM_alpha_s1.jp2', 'TSVM_alpha_s2.jp2', 'TSVM_phi_s1.jp2', 'TSVM_phi_s2.jp2', 'TSVM_psi1.jp2', 'TSVM_psi2.jp2', 'TSVM_tau_m1.jp2', 'TSVM_tau_m2.jp2']\n","original = ['T11.jp2', 'T12_imag.jp2', 'T12_real.jp2', 'T13_imag.jp2', 'T13_real.jp2', 'T22.jp2', 'T23_imag.jp2', 'T23_real.jp2', 'T33.jp2']\n","print(original)\n","X_7B = np.zeros((798,698, 9), dtype = np.float32)\n","i=0"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['T11.jp2', 'T12_imag.jp2', 'T12_real.jp2', 'T13_imag.jp2', 'T13_real.jp2', 'T22.jp2', 'T23_imag.jp2', 'T23_real.jp2', 'T33.jp2']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9wcD8IE8vfZD"},"source":["**STEP 3**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZzqxueZnlcgy","executionInfo":{"status":"ok","timestamp":1608272079274,"user_tz":-330,"elapsed":3726,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"6c5003c7-7a66-4a54-847c-e04e8d18549d"},"source":["import os\n","from PIL import Image\n","for band in original:\n","  path = os.path.join('/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/', band)\n","  B = Image.open(path)\n","  print(path)\n","  print(i)\n","  X_7B[:,:,i]=B\n","  i=i+1\n","\n","print(X_7B.size) \n","print(X_7B[0][0].size) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T11.jp2\n","0\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T12_imag.jp2\n","1\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T12_real.jp2\n","2\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T13_imag.jp2\n","3\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T13_real.jp2\n","4\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T22.jp2\n","5\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T23_imag.jp2\n","6\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T23_real.jp2\n","7\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T33.jp2\n","8\n","5013036\n","9\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"IwvuFwu9vh54"},"source":["**STEP 4:**"]},{"cell_type":"code","metadata":{"id":"-loeZXY-mZh0"},"source":["def initialize_test_elements(X_7B):\n","  import numpy as np\n","  import os\n","  from PIL import Image\n","  from keras.utils import to_categorical\n","\n","  X = np.zeros((9, 224, 224, 9), dtype = np.float32)\n","  i=0\n","  pixel_row=0\n","  counter=1\n","  while pixel_row < 672: \n","      pixel_col=0\n","      while pixel_col < 672:\n","          pic_part = X_7B[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          X[i] = pic_part\n","          i = i+1\n","          pixel_col=pixel_col+224\n","          counter = counter+1\n","      pixel_row=pixel_row+224\n","\n","  print(X.shape) \n","\n","  return X"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TfDyFM1qvrUN"},"source":["**STEP 5:**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2W9Rd4_cm7uj","executionInfo":{"status":"ok","timestamp":1608272088445,"user_tz":-330,"elapsed":2570,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"9e081619-0b9d-4617-f112-ab514ff52805"},"source":["#import_libraries()\n","X = initialize_test_elements(X_7B)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(9, 224, 224, 9)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"H_f7c9q5vuH4"},"source":["**STEP 6**"]},{"cell_type":"code","metadata":{"id":"Mvb2H7a0IyDi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608272094062,"user_tz":-330,"elapsed":5296,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"6be93776-0d3f-4412-a5ff-b32679e68b49"},"source":["from tensorflow import keras\n","import tensorflow as tf\n","import_libraries()\n","#model = create_unet()\n","#model.summary()\n","#model.load_weights(\"/content/gdrive/My Drive/good_gTruth/Models/model_7band_jp2.h5\")\n","#model.load_weights(\"/content/gdrive/My Drive/good_gTruth/Models/model_G4Urandom.h5\")\n","#model.get_config()\n","model = keras.models.load_model(\"/content/gdrive/My Drive/good_gTruth/Models/model_9jp2.h5\")\n","import keras.backend as K\n","print(K.eval(model.optimizer.lr))\n","model.optimizer.get_config()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n","0.001\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["{'amsgrad': False,\n"," 'beta_1': 0.9,\n"," 'beta_2': 0.999,\n"," 'decay': 0.0,\n"," 'epsilon': 1e-07,\n"," 'learning_rate': 0.001,\n"," 'name': 'Adam'}"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"OkTJl3bfvw0Z"},"source":["**STEP 7:**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CJIvZvkIo9t7","executionInfo":{"status":"ok","timestamp":1608272102787,"user_tz":-330,"elapsed":8143,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"f94712e9-e428-478d-fd36-94c35ee835f9"},"source":["#X_train, X_val, X_test, Y_train, Y_val, Y_test = initialize_elements()\n","preds = model.predict(X)\n","\n","import numpy as np\n","from PIL import Image\n","\n","img = np.zeros((224,224,3),np.uint8)\n","Preds_max = np.zeros((50, 224, 224, 1), dtype = np.float32)\n","p=0\n","\n","for one in preds:\n","  #print(one.shape)\n","  #print(one[0][0][0])\n","  for i in range(224):\n","    for j in range(224):\n","      if np.argmax(one[i][j]) == 1:  #Ocean\n","        img[i,j] = [0,0,255]\n","      elif np.argmax(one[i][j]) == 2:    #Settlement\n","        img[i,j] = [255,0,0]\n","      elif np.argmax(one[i][j]) == 3:    #Forest\n","        img[i,j] = [0, 255, 0]\n","      elif np.argmax(one[i][j]) == 4:    #Mangroves\n","        img[i,j] = [255,255,0]\n","      elif np.argmax(one[i][j]) == 5:    #Agriculture\n","        img[i,j] = [255,182,193]\n","      else:    #Undefined\n","        img[i,j] = [255,255,255]\n","      Preds_max[p][i][j] = np.argmax(one[i][j])\n","  name = '/content/gdrive/My Drive/good_gTruth/Test/jp2/paper/9_jp2_paper/' + str(p) + '.png'\n","  xgb_image = Image.fromarray(img, 'RGB')\n","  xgb_image.save(name)\n","  p=p+1\n","  print(p)\n","\n","print(Preds_max.shape)\n","print(Preds_max[0][0][0])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","(50, 224, 224, 1)\n","[2.]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RSBuJNwkv1p7"},"source":["**END**"]},{"cell_type":"markdown","metadata":{"id":"IACb6mSPqxnx"},"source":["Code for cropping the data"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8VBxwC-Jt3iF","executionInfo":{"status":"ok","timestamp":1608272063781,"user_tz":-330,"elapsed":10646,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"c505f647-c6f2-4e97-c301-8e276ae14db6"},"source":["import_libraries()\n","import os\n","from PIL import Image\n","\n","#original = ['Seven_Pv.jp2', 'Seven_Ps.jp2', 'Seven_Pod.jp2', 'Seven_Pmd.jp2', 'Seven_Ph.jp2', 'Seven_Pd.jp2', 'Seven_Pcd.jp2']\n","original = ['T11.jp2', 'T12_imag.jp2', 'T12_real.jp2', 'T13_imag.jp2', 'T13_real.jp2', 'T22.jp2', 'T23_imag.jp2', 'T23_real.jp2', 'T33.jp2']\n","#original = ['Singh4_G4U2_Vol.jp2', 'Singh4_G4U2_Odd.jp2', 'Singh4_G4U2_Hlx.jp2', 'Singh4_G4U2_Dbl.jp2']\n","#original = ['TSVM_alpha_s1.jp2', 'TSVM_phi_s1.jp2', 'TSVM_psi1.jp2', 'TSVM_tau_m1.jp2']\n","#original = ['TSVM_alpha_s1.jp2', 'TSVM_alpha_s2.jp2', 'TSVM_phi_s1.jp2', 'TSVM_phi_s2.jp2', 'TSVM_psi1.jp2', 'TSVM_psi2.jp2', 'TSVM_tau_m1.jp2', 'TSVM_tau_m2.jp2']\n","print(original)\n","\n","# The x, y coordinates of the areas to be cropped. (x1, y1, x2, y2)\n","crop_area = (450, 450, 1148, 1248)\n","\n","# Crops the image and saves it as \"new_filename\"\n","def crop_image(img, crop_area, new_filename):\n","    cropped_image = img.crop(crop_area)\n","    cropped_image.save(new_filename)\n","\n","for band in original:\n","  path = os.path.join('/content/gdrive/My Drive/good_gTruth/9_bands/', band)\n","  dest = os.path.join('/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/')\n","  B = Image.open(path)\n","  new_filename = dest + band\n","  print(new_filename)\n","\n","  crop_image(B, crop_area, new_filename)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n","['T11.jp2', 'T12_imag.jp2', 'T12_real.jp2', 'T13_imag.jp2', 'T13_real.jp2', 'T22.jp2', 'T23_imag.jp2', 'T23_real.jp2', 'T33.jp2']\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T11.jp2\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T12_imag.jp2\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T12_real.jp2\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T13_imag.jp2\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T13_real.jp2\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T22.jp2\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T23_imag.jp2\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T23_real.jp2\n","/content/gdrive/My Drive/good_gTruth/7_9_Jp2/9_jp2_new/T33.jp2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NCyNUkvNq51K"},"source":["Combining tiles into a single image"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7xGe5GsDxEHk","executionInfo":{"status":"ok","timestamp":1608272121520,"user_tz":-330,"elapsed":1771,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"b6e3d638-8fab-48c1-f9b3-031e48ffacad"},"source":["import_libraries()\n","from PIL import Image\n","import os\n","img = Image.new('RGB', (672,672))\n","\n","original = ['0.png', '1.png', '2.png', '3.png', '4.png', '5.png', '6.png', '7.png', '8.png']\n","print(original)\n","i,r,c=0,0,0\n","\n","for row in range(3):\n","  img1 = Image.new('RGB', (672, 224))\n","  off_set = 0\n","  for col in range(3):\n","    path = os.path.join('/content/gdrive/My Drive/good_gTruth/Test/jp2/paper/9_jp2_paper/', original[i])\n","    B = Image.open(path)\n","    i=i+1\n","    img1.paste(B, (off_set,0))\n","    print('done')\n","    off_set=off_set+224\n","    #img1.save('/content/gdrive/My Drive/good_gTruth/Test/random_7_paper/7_paper.jpg')\n","  img.paste(img1, (0,c))\n","  c+=224\n","\n","img.save('/content/gdrive/My Drive/good_gTruth/Test/jp2/paper/9_jp2_paper/9_jp2_paper.jpg')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n","['0.png', '1.png', '2.png', '3.png', '4.png', '5.png', '6.png', '7.png', '8.png']\n","done\n","done\n","done\n","done\n","done\n","done\n","done\n","done\n","done\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rFr390NL5hCh"},"source":[""],"execution_count":null,"outputs":[]}]}