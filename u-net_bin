{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"u-net_bin","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNjR+0zaPHW07jSiQcSizXl"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nMOrk99UnjWs","executionInfo":{"status":"ok","timestamp":1609403167524,"user_tz":-330,"elapsed":1002,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"64965143-e235-44e3-a66c-71bb68c69eb5"},"source":["from google.colab import drive\n","import os\n","\n","import numpy as np\n","from PIL import Image\n","from keras.utils import to_categorical\n","\n","drive.mount('/content/gdrive')\n","os.chdir('/content/gdrive/My Drive/good_gTruth/Binary_files')"],"execution_count":52,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Ehc1bM-JMfOl"},"source":["Ignore this step"]},{"cell_type":"code","metadata":{"id":"teuMNqHztH0u"},"source":["def read(original):\n","  X = np.zeros((1554,1228, 9), dtype = np.float32)\n","  i=0\n","  for si_file in original:\n","    T = np.fromfile(si_file,  dtype=np.float32)\n","    T= T.reshape(1554,1228)\n","    X[:,:,i]=T\n","    i=i+1\n","  return X"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"msQeODs7Kw9V","executionInfo":{"status":"ok","timestamp":1609400083745,"user_tz":-330,"elapsed":1130,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["def initialize_elements():\n","  from PIL import Image\n","  import os\n","  import numpy as np \n","  import math \n","  import cmath\n","  #original = ['T11.bin', 'T12_imag.bin', 'T12_real.bin', 'T13_imag.bin', 'T13_real.bin', 'T22.bin', 'T23_imag.bin', 'T23_real.bin', 'T33.bin', 'span.bin']\n","  original = ['Seven_Pv.bin', 'Seven_Ps.bin', 'Seven_Pod.bin', 'Seven_Pmd.bin', 'Seven_Ph.bin', 'Seven_Pd.bin', 'Seven_Pcd.bin']\n","  #original = ['Singh4_G4U2_Vol.bin', 'Singh4_G4U2_Odd.bin', 'Singh4_G4U2_Hlx.bin', 'Singh4_G4U2_Dbl.bin','span.bin']\n","  #original = ['TSVM_alpha_s1.bin', 'TSVM_phi_s1.bin', 'TSVM_psi1.bin', 'TSVM_tau_m1.bin', 'span.bin']\n","  #original = ['TSVM_alpha_s1.bin', 'TSVM_alpha_s2.bin', 'TSVM_phi_s1.bin', 'TSVM_phi_s2.bin', 'TSVM_psi1.bin', 'TSVM_psi2.bin', 'TSVM_tau_m1.bin', 'TSVM_tau_m2.bin']\n","  #original = ['TSVM_alpha_s1.jp2', 'TSVM_phi_s1.jp2', 'TSVM_psi1.jp2', 'TSVM_tau_m1.jp2']\n","\n","  '''T = np.fromfile('CCC.bin',  dtype=np.float32)\n","  T= T.reshape(1554,2456)\n","  row,r,c,col=0,0,0,0\n","  mag = np.zeros((1554, 1228), dtype=np.float32)\n","  phase = np.zeros((1554, 1228), dtype=np.float32)\n","  while row<1554:\n","    while col<2456:\n","      z = complex(T[row,col],T[row,col+1])\n","      mag[r,c] = abs(z)\n","      phase[r,c] = cmath.phase(z)\n","      c+=1\n","      col+=2\n","    row+=1\n","    r+=1\n","  '''\n","  print(original) #['Seven_Pv.jp2', 'Seven_Ps.jp2', 'Seven_Pod.jp2', 'Seven_Pmd.jp2', 'Seven_Ph.jp2', 'Seven_Pd.jp2', 'Seven_Pcd.jp2']\n","  X_7B = np.zeros((1554,1228, 8), dtype = np.float32)\n","  i=0\n","\n","  #stacking the 7/4/9 layers\n","  for band in original:\n","    T = np.fromfile(band,  dtype=np.float32)\n","    T= T.reshape(1554,1228)\n","    X_7B[:,:,i]=T\n","    i=i+1\n","\n","  #X_7B[:,:,9]=mag\n","  #X_7B[:,:,10]=phase\n","  print(X_7B.size) #13358184\n","  print(X_7B[0][0].size) #7\n","\n","  #Taking the masking as an input\n","  M_7B = np.zeros((1554,1228, 1), dtype = np.float32)\n","  path = os.path.join('/content/gdrive/My Drive/good_gTruth/', 'Label_1.png')\n","  B = Image.open(path)\n","  M_7B[:,:,0]=B\n","\n","  import numpy as np\n","  import os\n","  from PIL import Image\n","  from keras.utils import to_categorical\n","  mask = np.zeros((1554,1228), dtype = np.float32)\n","  M_7B_one = np.zeros((1554,1228, 6), dtype = np.float32)\n","  path = os.path.join('/content/gdrive/My Drive/good_gTruth/', 'Label_1.png')\n","  B = Image.open(path)\n","  encoded = to_categorical(B)\n","  #print(encoded)\n","  M_7B_one[:,:,:]=encoded\n","\n","  print(M_7B.size) #1908312\n","  print(M_7B[0][0].size) #1\n","  print(M_7B_one.size) #\n","\n","  #Creating overlapping tiles \n","  X = np.zeros((250, 224, 224, 8), dtype = np.float32)\n","  i=0\n","  pixel_row=0\n","  counter=1\n","  while pixel_row < 1329: \n","      pixel_col=0\n","      while pixel_col < 1005:\n","          pic_part = X_7B[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          X[i] = pic_part\n","          i = i+1\n","          pixel_col=pixel_col+111\n","          counter = counter+1\n","      pixel_row=pixel_row+55\n","\n","  print(X.shape) #(250, 224, 224, 10)\n","\n","  #creating tiles for masking as well\n","\n","  Y = np.zeros((250, 224, 224, 1), dtype = np.float32)\n","  Y_one = np.zeros((250, 224, 224, 6), dtype = np.float32)\n","  i=0\n","  pixel_row=0\n","  counter=1\n","  while pixel_row < 1329: \n","      pixel_col=0\n","      while pixel_col < 1005:\n","          pic_part = M_7B[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          Y[i] = pic_part\n","          Y_one[i] = M_7B_one[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          i = i+1\n","          pixel_col=pixel_col+111\n","          counter = counter+1\n","      pixel_row=pixel_row+55\n","\n","  print(Y.shape) #(250, 224, 224, 1)\n","  print(Y_one.shape) #\n","\n","  from sklearn.model_selection import train_test_split\n","\n","  X_tv, X_test, Y_tv, Y_test = train_test_split(X,Y_one,test_size=0.2,train_size=0.8)\n","  X_train, X_val, Y_train, Y_val = train_test_split(X_tv,Y_tv,test_size = 0.20,train_size =0.80)  \n","\n","  print(X_train.shape)\n","  print(X_val.shape)\n","  print(X_test.shape)\n","\n","  #(160, 224, 224, 7)\n","  #(40, 224, 224, 7)\n","  #(50, 224, 224, 7)\n","  \n","  print(Y_train.shape)\n","  print(Y_val.shape)\n","  print(Y_test.shape)\n","\n","  #(160, 224, 224, 1)\n","  #(40, 224, 224, 1)\n","  #(50, 224, 224, 1)\n","\n","  return X_train, X_val, X_test, Y_train, Y_val, Y_test"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"id":"TWTOyGZhKLMr","executionInfo":{"status":"ok","timestamp":1609401652615,"user_tz":-330,"elapsed":1043,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["from keras.models import Model\n","from keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D, concatenate, Conv2DTranspose, BatchNormalization, Dropout\n","from keras.optimizers import Adam\n","from keras.utils import plot_model\n","from keras import backend as K\n","\n","\n","def unet_model(n_classes=6, im_sz=224, n_channels=9, n_filters_start=32, growth_factor=2, upconv=True,\n","               class_weights=[1.3453, 1.0000, 1.1585, 0.4894, 0.5044, 0.01]):\n","    droprate=0.25\n","    n_filters = n_filters_start\n","    inputs = Input((im_sz, im_sz, n_channels))\n","    #inputs = BatchNormalization()(inputs)\n","    conv1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(inputs)\n","    conv1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv1)\n","    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)\n","    #pool1 = Dropout(droprate)(pool1)\n","\n","    n_filters *= growth_factor\n","    pool1 = BatchNormalization()(pool1)\n","    conv2 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool1)\n","    conv2 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv2)\n","    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)\n","    pool2 = Dropout(droprate)(pool2)\n","\n","    n_filters *= growth_factor\n","    pool2 = BatchNormalization()(pool2)\n","    conv3 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool2)\n","    conv3 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv3)\n","    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)\n","    pool3 = Dropout(droprate)(pool3)\n","\n","    n_filters *= growth_factor\n","    pool3 = BatchNormalization()(pool3)\n","    conv4_0 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool3)\n","    conv4_0 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv4_0)\n","    pool4_1 = MaxPooling2D(pool_size=(2, 2))(conv4_0)\n","    pool4_1 = Dropout(droprate)(pool4_1)\n","\n","    n_filters *= growth_factor\n","    pool4_1 = BatchNormalization()(pool4_1)\n","    conv4_1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool4_1)\n","    conv4_1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv4_1)\n","    pool4_2 = MaxPooling2D(pool_size=(2, 2))(conv4_1)\n","    pool4_2 = Dropout(droprate)(pool4_2)\n","\n","    n_filters *= growth_factor\n","    conv5 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(pool4_2)\n","    conv5 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv5)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up6_1 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv5), conv4_1])\n","    else:\n","        up6_1 = concatenate([UpSampling2D(size=(2, 2))(conv5), conv4_1])\n","    up6_1 = BatchNormalization()(up6_1)\n","    conv6_1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up6_1)\n","    conv6_1 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv6_1)\n","    conv6_1 = Dropout(droprate)(conv6_1)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up6_2 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv6_1), conv4_0])\n","    else:\n","        up6_2 = concatenate([UpSampling2D(size=(2, 2))(conv6_1), conv4_0])\n","    up6_2 = BatchNormalization()(up6_2)\n","    conv6_2 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up6_2)\n","    conv6_2 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv6_2)\n","    conv6_2 = Dropout(droprate)(conv6_2)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up7 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv6_2), conv3])\n","    else:\n","        up7 = concatenate([UpSampling2D(size=(2, 2))(conv6_2), conv3])\n","    up7 = BatchNormalization()(up7)\n","    conv7 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up7)\n","    conv7 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv7)\n","    conv7 = Dropout(droprate)(conv7)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up8 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv7), conv2])\n","    else:\n","        up8 = concatenate([UpSampling2D(size=(2, 2))(conv7), conv2])\n","    up8 = BatchNormalization()(up8)\n","    conv8 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up8)\n","    conv8 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv8)\n","    conv8 = Dropout(droprate)(conv8)\n","\n","    n_filters //= growth_factor\n","    if upconv:\n","        up9 = concatenate([Conv2DTranspose(n_filters, (2, 2), strides=(2, 2), padding='same')(conv8), conv1])\n","    else:\n","        up9 = concatenate([UpSampling2D(size=(2, 2))(conv8), conv1])\n","    conv9 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(up9)\n","    conv9 = Conv2D(n_filters, (3, 3), activation='relu', padding='same')(conv9)\n","\n","    conv10 = Conv2D(n_classes, (1, 1), activation='sigmoid')(conv9)\n","\n","    model = Model(inputs=inputs, outputs=conv10)\n","\n","    '''def weighted_binary_crossentropy(y_true, y_pred):\n","        class_loglosses = K.mean(K.binary_crossentropy(y_true, y_pred), axis=[0, 1, 2])\n","        return K.sum(class_loglosses * K.constant(class_weights))'''\n","\n","    model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])\n","    return model"],"execution_count":39,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8qpsxtDKL1d1","executionInfo":{"status":"ok","timestamp":1609400090393,"user_tz":-330,"elapsed":2726,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"bf8e3bd4-ecb1-4d7c-ab9d-a724ecdfc3b0"},"source":["X_train, X_val, X_test, Y_train, Y_val, Y_test = initialize_elements()"],"execution_count":21,"outputs":[{"output_type":"stream","text":["['Seven_Pv.bin', 'Seven_Ps.bin', 'Seven_Pod.bin', 'Seven_Pmd.bin', 'Seven_Ph.bin', 'Seven_Pd.bin', 'Seven_Pcd.bin']\n","15266496\n","8\n","1908312\n","1\n","11449872\n","(250, 224, 224, 8)\n","(250, 224, 224, 1)\n","(250, 224, 224, 6)\n","(160, 224, 224, 8)\n","(40, 224, 224, 8)\n","(50, 224, 224, 8)\n","(160, 224, 224, 6)\n","(40, 224, 224, 6)\n","(50, 224, 224, 6)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yTetHm7dMmma","executionInfo":{"status":"ok","timestamp":1608873537004,"user_tz":-330,"elapsed":376837,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"2e82757a-2fbd-4844-cb36-09171624a64e"},"source":["model = unet_model(n_classes=6, im_sz=224, n_channels=11, n_filters_start=32, growth_factor=2, upconv=True,\n","               class_weights=[0.4894, 0.5044, 1.0000, 1.1585, 1.3453, 0.01])\n","model.fit(X_train, Y_train, batch_size=10, epochs=100, shuffle=True,\n","                  validation_data=(X_val, Y_val))"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Epoch 1/100\n","16/16 [==============================] - 6s 259ms/step - loss: 1.9566 - accuracy: 0.4742 - val_loss: 1.5316 - val_accuracy: 0.4589\n","Epoch 2/100\n","16/16 [==============================] - 4s 235ms/step - loss: 1.1002 - accuracy: 0.5940 - val_loss: 7.0254 - val_accuracy: 0.3859\n","Epoch 3/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.8305 - accuracy: 0.6978 - val_loss: 23.9882 - val_accuracy: 0.2061\n","Epoch 4/100\n","16/16 [==============================] - 4s 236ms/step - loss: 0.8348 - accuracy: 0.7055 - val_loss: 17.1728 - val_accuracy: 0.4073\n","Epoch 5/100\n","16/16 [==============================] - 4s 237ms/step - loss: 0.7502 - accuracy: 0.7310 - val_loss: 1.6924 - val_accuracy: 0.7470\n","Epoch 6/100\n","16/16 [==============================] - 4s 238ms/step - loss: 0.7450 - accuracy: 0.7476 - val_loss: 19.9501 - val_accuracy: 0.5008\n","Epoch 7/100\n","16/16 [==============================] - 4s 239ms/step - loss: 0.7252 - accuracy: 0.7645 - val_loss: 8.5925 - val_accuracy: 0.6326\n","Epoch 8/100\n","16/16 [==============================] - 4s 239ms/step - loss: 0.6608 - accuracy: 0.7864 - val_loss: 0.8737 - val_accuracy: 0.7799\n","Epoch 9/100\n","16/16 [==============================] - 4s 239ms/step - loss: 0.6260 - accuracy: 0.8016 - val_loss: 0.6584 - val_accuracy: 0.7847\n","Epoch 10/100\n","16/16 [==============================] - 4s 238ms/step - loss: 0.6608 - accuracy: 0.7879 - val_loss: 1.9089 - val_accuracy: 0.6755\n","Epoch 11/100\n","16/16 [==============================] - 4s 238ms/step - loss: 0.6123 - accuracy: 0.8049 - val_loss: 1.4451 - val_accuracy: 0.5858\n","Epoch 12/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.6144 - accuracy: 0.7999 - val_loss: 2.6483 - val_accuracy: 0.5259\n","Epoch 13/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.6009 - accuracy: 0.8083 - val_loss: 1.0907 - val_accuracy: 0.7904\n","Epoch 14/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.6033 - accuracy: 0.8035 - val_loss: 0.7231 - val_accuracy: 0.7902\n","Epoch 15/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.5591 - accuracy: 0.8250 - val_loss: 0.9385 - val_accuracy: 0.7827\n","Epoch 16/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.5377 - accuracy: 0.8247 - val_loss: 0.6751 - val_accuracy: 0.7727\n","Epoch 17/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.4605 - accuracy: 0.8515 - val_loss: 0.4759 - val_accuracy: 0.8461\n","Epoch 18/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.4962 - accuracy: 0.8437 - val_loss: 0.9409 - val_accuracy: 0.7521\n","Epoch 19/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.4561 - accuracy: 0.8528 - val_loss: 0.9158 - val_accuracy: 0.7247\n","Epoch 20/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.4515 - accuracy: 0.8531 - val_loss: 0.4790 - val_accuracy: 0.8410\n","Epoch 21/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.4076 - accuracy: 0.8667 - val_loss: 0.4499 - val_accuracy: 0.8530\n","Epoch 22/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.4943 - accuracy: 0.8419 - val_loss: 0.4677 - val_accuracy: 0.8672\n","Epoch 23/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.4700 - accuracy: 0.8484 - val_loss: 0.4789 - val_accuracy: 0.8332\n","Epoch 24/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.4538 - accuracy: 0.8515 - val_loss: 0.4561 - val_accuracy: 0.8520\n","Epoch 25/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.5252 - accuracy: 0.8211 - val_loss: 0.4877 - val_accuracy: 0.8561\n","Epoch 26/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.4397 - accuracy: 0.8533 - val_loss: 0.4308 - val_accuracy: 0.8522\n","Epoch 27/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.3871 - accuracy: 0.8662 - val_loss: 0.3914 - val_accuracy: 0.8707\n","Epoch 28/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.4328 - accuracy: 0.8619 - val_loss: 0.4174 - val_accuracy: 0.8652\n","Epoch 29/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.4059 - accuracy: 0.8694 - val_loss: 0.4030 - val_accuracy: 0.8653\n","Epoch 30/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.4039 - accuracy: 0.8671 - val_loss: 0.5451 - val_accuracy: 0.8057\n","Epoch 31/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.3824 - accuracy: 0.8771 - val_loss: 0.3547 - val_accuracy: 0.8835\n","Epoch 32/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.3154 - accuracy: 0.8990 - val_loss: 0.4377 - val_accuracy: 0.8455\n","Epoch 33/100\n","16/16 [==============================] - 4s 236ms/step - loss: 0.3366 - accuracy: 0.8903 - val_loss: 0.3925 - val_accuracy: 0.8774\n","Epoch 34/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.3436 - accuracy: 0.8913 - val_loss: 0.3476 - val_accuracy: 0.8888\n","Epoch 35/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.3118 - accuracy: 0.9000 - val_loss: 0.4033 - val_accuracy: 0.8701\n","Epoch 36/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.3251 - accuracy: 0.8968 - val_loss: 0.4474 - val_accuracy: 0.8403\n","Epoch 37/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.3285 - accuracy: 0.8943 - val_loss: 0.4339 - val_accuracy: 0.8622\n","Epoch 38/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.2934 - accuracy: 0.9071 - val_loss: 0.3383 - val_accuracy: 0.8926\n","Epoch 39/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.2820 - accuracy: 0.9112 - val_loss: 0.3907 - val_accuracy: 0.8686\n","Epoch 40/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.2802 - accuracy: 0.9114 - val_loss: 0.4151 - val_accuracy: 0.8633\n","Epoch 41/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.3236 - accuracy: 0.8956 - val_loss: 0.3245 - val_accuracy: 0.8904\n","Epoch 42/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2619 - accuracy: 0.9171 - val_loss: 0.2834 - val_accuracy: 0.9117\n","Epoch 43/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.2654 - accuracy: 0.9173 - val_loss: 0.2940 - val_accuracy: 0.9062\n","Epoch 44/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.3175 - accuracy: 0.8990 - val_loss: 0.2738 - val_accuracy: 0.9139\n","Epoch 45/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2556 - accuracy: 0.9183 - val_loss: 0.2735 - val_accuracy: 0.9125\n","Epoch 46/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2649 - accuracy: 0.9159 - val_loss: 0.3226 - val_accuracy: 0.8976\n","Epoch 47/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2445 - accuracy: 0.9234 - val_loss: 0.2712 - val_accuracy: 0.9148\n","Epoch 48/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2571 - accuracy: 0.9198 - val_loss: 0.3332 - val_accuracy: 0.8917\n","Epoch 49/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.2818 - accuracy: 0.9104 - val_loss: 0.2579 - val_accuracy: 0.9179\n","Epoch 50/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2397 - accuracy: 0.9243 - val_loss: 0.2843 - val_accuracy: 0.9062\n","Epoch 51/100\n","16/16 [==============================] - 4s 243ms/step - loss: 0.2476 - accuracy: 0.9203 - val_loss: 0.2429 - val_accuracy: 0.9214\n","Epoch 52/100\n","16/16 [==============================] - 4s 236ms/step - loss: 0.2332 - accuracy: 0.9257 - val_loss: 0.2656 - val_accuracy: 0.9136\n","Epoch 53/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.2439 - accuracy: 0.9219 - val_loss: 0.2520 - val_accuracy: 0.9185\n","Epoch 54/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2333 - accuracy: 0.9265 - val_loss: 0.2244 - val_accuracy: 0.9265\n","Epoch 55/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2374 - accuracy: 0.9245 - val_loss: 0.3044 - val_accuracy: 0.9030\n","Epoch 56/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2260 - accuracy: 0.9274 - val_loss: 0.2774 - val_accuracy: 0.9081\n","Epoch 57/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2368 - accuracy: 0.9247 - val_loss: 0.2839 - val_accuracy: 0.9102\n","Epoch 58/100\n","16/16 [==============================] - 4s 236ms/step - loss: 0.2233 - accuracy: 0.9288 - val_loss: 0.2319 - val_accuracy: 0.9277\n","Epoch 59/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1990 - accuracy: 0.9357 - val_loss: 0.2848 - val_accuracy: 0.9128\n","Epoch 60/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.2178 - accuracy: 0.9308 - val_loss: 0.2131 - val_accuracy: 0.9297\n","Epoch 61/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2349 - accuracy: 0.9228 - val_loss: 0.3344 - val_accuracy: 0.8937\n","Epoch 62/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.2165 - accuracy: 0.9312 - val_loss: 0.2835 - val_accuracy: 0.9084\n","Epoch 63/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.2470 - accuracy: 0.9205 - val_loss: 0.2484 - val_accuracy: 0.9248\n","Epoch 64/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2217 - accuracy: 0.9286 - val_loss: 0.2546 - val_accuracy: 0.9193\n","Epoch 65/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.2284 - accuracy: 0.9286 - val_loss: 0.2495 - val_accuracy: 0.9218\n","Epoch 66/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.2588 - accuracy: 0.9192 - val_loss: 0.3232 - val_accuracy: 0.9041\n","Epoch 67/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2343 - accuracy: 0.9244 - val_loss: 0.2121 - val_accuracy: 0.9309\n","Epoch 68/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1971 - accuracy: 0.9356 - val_loss: 0.2146 - val_accuracy: 0.9305\n","Epoch 69/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2342 - accuracy: 0.9248 - val_loss: 0.2147 - val_accuracy: 0.9308\n","Epoch 70/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1839 - accuracy: 0.9407 - val_loss: 0.2083 - val_accuracy: 0.9318\n","Epoch 71/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2094 - accuracy: 0.9319 - val_loss: 0.2416 - val_accuracy: 0.9238\n","Epoch 72/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2361 - accuracy: 0.9234 - val_loss: 0.2331 - val_accuracy: 0.9275\n","Epoch 73/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1961 - accuracy: 0.9366 - val_loss: 0.2214 - val_accuracy: 0.9308\n","Epoch 74/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1871 - accuracy: 0.9391 - val_loss: 0.2340 - val_accuracy: 0.9254\n","Epoch 75/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1886 - accuracy: 0.9383 - val_loss: 0.2077 - val_accuracy: 0.9326\n","Epoch 76/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.2025 - accuracy: 0.9351 - val_loss: 0.2558 - val_accuracy: 0.9221\n","Epoch 77/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2015 - accuracy: 0.9351 - val_loss: 0.1999 - val_accuracy: 0.9356\n","Epoch 78/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1831 - accuracy: 0.9403 - val_loss: 0.1954 - val_accuracy: 0.9372\n","Epoch 79/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1803 - accuracy: 0.9408 - val_loss: 0.1879 - val_accuracy: 0.9396\n","Epoch 80/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1628 - accuracy: 0.9461 - val_loss: 0.1711 - val_accuracy: 0.9437\n","Epoch 81/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1785 - accuracy: 0.9403 - val_loss: 0.2060 - val_accuracy: 0.9347\n","Epoch 82/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.1728 - accuracy: 0.9430 - val_loss: 0.2100 - val_accuracy: 0.9352\n","Epoch 83/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1614 - accuracy: 0.9471 - val_loss: 0.1850 - val_accuracy: 0.9405\n","Epoch 84/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1524 - accuracy: 0.9477 - val_loss: 0.1833 - val_accuracy: 0.9393\n","Epoch 85/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.1518 - accuracy: 0.9487 - val_loss: 0.1670 - val_accuracy: 0.9445\n","Epoch 86/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1730 - accuracy: 0.9415 - val_loss: 0.2169 - val_accuracy: 0.9301\n","Epoch 87/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1558 - accuracy: 0.9475 - val_loss: 0.2571 - val_accuracy: 0.9217\n","Epoch 88/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1757 - accuracy: 0.9423 - val_loss: 0.1797 - val_accuracy: 0.9411\n","Epoch 89/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1495 - accuracy: 0.9491 - val_loss: 0.1768 - val_accuracy: 0.9408\n","Epoch 90/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1457 - accuracy: 0.9508 - val_loss: 0.1637 - val_accuracy: 0.9454\n","Epoch 91/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.1515 - accuracy: 0.9485 - val_loss: 0.1709 - val_accuracy: 0.9427\n","Epoch 92/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1518 - accuracy: 0.9493 - val_loss: 0.1825 - val_accuracy: 0.9406\n","Epoch 93/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1652 - accuracy: 0.9442 - val_loss: 0.1665 - val_accuracy: 0.9445\n","Epoch 94/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1493 - accuracy: 0.9489 - val_loss: 0.1596 - val_accuracy: 0.9468\n","Epoch 95/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1238 - accuracy: 0.9575 - val_loss: 0.1536 - val_accuracy: 0.9484\n","Epoch 96/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1420 - accuracy: 0.9512 - val_loss: 0.1533 - val_accuracy: 0.9480\n","Epoch 97/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1353 - accuracy: 0.9540 - val_loss: 0.1496 - val_accuracy: 0.9499\n","Epoch 98/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1371 - accuracy: 0.9531 - val_loss: 0.1600 - val_accuracy: 0.9455\n","Epoch 99/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1464 - accuracy: 0.9501 - val_loss: 0.1645 - val_accuracy: 0.9448\n","Epoch 100/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.1381 - accuracy: 0.9527 - val_loss: 0.1721 - val_accuracy: 0.9432\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f1f7804de10>"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zs2YQBSPlCg_","executionInfo":{"status":"ok","timestamp":1609403048442,"user_tz":-330,"elapsed":1838,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"f913a5aa-1b61-4c79-8bca-ee3fe3720da5"},"source":["loss, acc = model.evaluate(X_test, Y_test)"],"execution_count":48,"outputs":[{"output_type":"stream","text":["2/2 [==============================] - 1s 146ms/step - loss: 0.1737 - accuracy: 0.9435\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Gr0Z_ZNf3yDW"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-H_wMrnAMrJ4","executionInfo":{"status":"ok","timestamp":1609403056101,"user_tz":-330,"elapsed":2493,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["model.save('/content/gdrive/My Drive/good_gTruth/Models/model_4binary.h5')"],"execution_count":49,"outputs":[]},{"cell_type":"code","metadata":{"id":"7aVprZPH7hn_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609403198254,"user_tz":-330,"elapsed":26156,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"5aca6ab4-71e0-435f-c209-3653d0680b75"},"source":["loss, acc = model.evaluate(X_test,  Y_test)\n","preds = model.predict(X_test)\n","\n","import numpy as np\n","from PIL import Image\n","\n","img = np.zeros((224,224,3),np.uint8)\n","Preds_max = np.zeros((50, 224, 224, 1), dtype = np.float32)\n","p=0\n","\n","for one in preds:\n","  #print(one.shape)\n","  #print(one[0][0][0])\n","  for i in range(224):\n","    for j in range(224):\n","      if np.argmax(one[i][j]) == 1:  #Ocean\n","        img[i,j] = [0,0,255]\n","      elif np.argmax(one[i][j]) == 2:    #Settlement\n","        img[i,j] = [255,0,0]\n","      elif np.argmax(one[i][j]) == 3:    #Forest\n","        img[i,j] = [0, 255, 0]\n","      elif np.argmax(one[i][j]) == 4:    #Mangroves\n","        img[i,j] = [255,255,0]\n","      elif np.argmax(one[i][j]) == 5:    #Agriculture\n","        img[i,j] = [255,182,193]\n","      else:    #Undefined\n","        img[i,j] = [255,255,255]\n","      Preds_max[p][i][j] = np.argmax(one[i][j])\n","  name = '/content/gdrive/My Drive/good_gTruth/Test/bin/4binary/' + str(p) + '.png'\n","  xgb_image = Image.fromarray(img, 'RGB')\n","  xgb_image.save(name)\n","  p=p+1\n","  print(p)\n","\n","print(Preds_max.shape)\n","print(Preds_max[0][0][0])"],"execution_count":53,"outputs":[{"output_type":"stream","text":["2/2 [==============================] - 0s 117ms/step - loss: 0.1737 - accuracy: 0.9435\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","(50, 224, 224, 1)\n","[2.]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8hw9_hpU2q8v"},"source":["Testing Tile"]},{"cell_type":"code","metadata":{"id":"QFFr8OVQEtvf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608872718121,"user_tz":-330,"elapsed":30996,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"f3a1a4ca-cbc7-4056-f510-4d7ca47d53f6"},"source":["import os\n","from PIL import Image\n","import math\n","import cmath\n","\n","#original = ['T11.bin', 'T12_imag.bin', 'T12_real.bin', 'T13_imag.bin', 'T13_real.bin', 'T22.bin', 'T23_imag.bin', 'T23_real.bin', 'T33.bin', 'span.bin']\n","#original = ['Seven_Pv.bin', 'Seven_Ps.bin', 'Seven_Pod.bin', 'Seven_Pmd.bin', 'Seven_Ph.bin', 'Seven_Pd.bin', 'Seven_Pcd.bin', 'span.bin']\n","#original = ['Singh4_G4U2_Vol.bin', 'Singh4_G4U2_Odd.bin', 'Singh4_G4U2_Hlx.bin', 'Singh4_G4U2_Dbl.bin', 'span.bin']\n","#original = ['TSVM_alpha_s1.bin', 'TSVM_phi_s1.bin', 'TSVM_psi1.bin', 'TSVM_tau_m1.bin', 'span.bin']\n","original = ['TSVM_alpha_s1.bin', 'TSVM_alpha_s2.bin', 'TSVM_phi_s1.bin', 'TSVM_phi_s2.bin', 'TSVM_psi1.bin', 'TSVM_psi2.bin', 'TSVM_tau_m1.bin', 'TSVM_tau_m2.bin', 'span.bin']\n","\n","print(original)\n","X = np.zeros((778,698, 11), dtype = np.float32)\n","i=0\n","\n","T = np.fromfile('CCC.bin',  dtype=np.float32)\n","T= T.reshape(1554,2456)\n","row,r,c,col=0,0,0,0\n","mag = np.zeros((1554, 1228), dtype=np.float32)\n","phase = np.zeros((1554, 1228), dtype=np.float32)\n","while row<1554:\n","  while col<2456:\n","    z = complex(T[row,col],T[row,col+1])\n","    mag[r,c] = abs(z)\n","    phase[r,c] = cmath.phase(z)\n","    c+=1\n","    col+=2\n","  row+=1\n","  r+=1\n","\n","\n","for band in original:\n","  print(i)\n","  T = np.fromfile(band,  dtype=np.float32)\n","  T = T.reshape(1554,1228)\n","  T = T[450:1228, 450:1148]\n","  X[:,:,i]=T\n","  i=i+1\n","  \n","\n","X[:,:,9]=mag[450:1228, 450:1148]\n","X[:,:,10]=phase[450:1228, 450:1148]\n"],"execution_count":11,"outputs":[{"output_type":"stream","text":["['TSVM_alpha_s1.bin', 'TSVM_alpha_s2.bin', 'TSVM_phi_s1.bin', 'TSVM_phi_s2.bin', 'TSVM_psi1.bin', 'TSVM_psi2.bin', 'TSVM_tau_m1.bin', 'TSVM_tau_m2.bin', 'span.bin']\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qqG_LGFetvgx","executionInfo":{"status":"ok","timestamp":1608872718121,"user_tz":-330,"elapsed":28272,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"b8046948-551e-4fec-a1b2-b161ad5e7759"},"source":["print(X.size)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["5973484\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PrVHPIZPbAj4","executionInfo":{"status":"ok","timestamp":1608872718123,"user_tz":-330,"elapsed":28014,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["def  testing_tile(X):\n","  X_new = np.zeros((9, 224, 224, 11), dtype = np.float32)\n","  i=0\n","  pixel_row=0\n","  counter=1\n","  while pixel_row < 672: \n","    pixel_col=0\n","    while pixel_col < 672:\n","      pic_part = X[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","      X_new[i] = pic_part\n","      i = i+1\n","      pixel_col=pixel_col+224\n","      counter = counter+1\n","      print(pixel_row, pixel_col)\n","    pixel_row=pixel_row+224\n","\n","  print(X_new.shape)\n","  return X_new"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mqCpUNv9cZlL","executionInfo":{"status":"ok","timestamp":1608872718124,"user_tz":-330,"elapsed":26518,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"b627a29e-2af5-475e-cce3-c4a06d4e95e2"},"source":["X_test = testing_tile(X)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["0 224\n","0 448\n","0 672\n","224 224\n","224 448\n","224 672\n","448 224\n","448 448\n","448 672\n","(9, 224, 224, 11)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GLI25kib0aL2","executionInfo":{"status":"ok","timestamp":1608872726297,"user_tz":-330,"elapsed":34139,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"5cdb3309-cf60-4ed5-b5cb-f0805a5aedca"},"source":["from tensorflow import keras\n","import tensorflow as tf\n","\n","model = keras.models.load_model(\"/content/gdrive/My Drive/good_gTruth/Models/model_touzi2bin_new.h5\")\n","import keras.backend as K\n","print(K.eval(model.optimizer.lr))\n","model.optimizer.get_config()"],"execution_count":15,"outputs":[{"output_type":"stream","text":["0.001\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["{'amsgrad': False,\n"," 'beta_1': 0.9,\n"," 'beta_2': 0.999,\n"," 'decay': 0.0,\n"," 'epsilon': 1e-07,\n"," 'learning_rate': 0.001,\n"," 'name': 'Adam'}"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pHFPiBcvdTOo","executionInfo":{"status":"ok","timestamp":1608872733669,"user_tz":-330,"elapsed":39582,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"332adb91-254a-4cf1-925f-7299478d4ad2"},"source":["preds = model.predict(X_test)\n","\n","import numpy as np\n","from PIL import Image\n","\n","img = np.zeros((224,224,3),np.uint8)\n","Preds_max = np.zeros((50, 224, 224, 1), dtype = np.float32)\n","p=0\n","\n","for one in preds:\n","  #print(one.shape)\n","  #print(one[0][0][0])\n","  for i in range(224):\n","    for j in range(224):\n","      if np.argmax(one[i][j]) == 1:  #Ocean\n","        img[i,j] = [0,0,255]\n","      elif np.argmax(one[i][j]) == 2:    #Settlement\n","        img[i,j] = [255,0,0]\n","      elif np.argmax(one[i][j]) == 3:    #Forest\n","        img[i,j] = [0, 255, 0]\n","      elif np.argmax(one[i][j]) == 4:    #Mangroves\n","        img[i,j] = [255,255,0]\n","      elif np.argmax(one[i][j]) == 5:    #Agriculture\n","        img[i,j] = [255,182,193]\n","      else:    #Undefined\n","        img[i,j] = [255,255,255]\n","      Preds_max[p][i][j] = np.argmax(one[i][j])\n","  name = '/content/gdrive/My Drive/good_gTruth/Test/bin/paper/touzi2bin_new_paper/' + str(p) + '.png'\n","  xgb_image = Image.fromarray(img, 'RGB')\n","  xgb_image.save(name)\n","  p=p+1\n","  print(p)\n","\n","print(Preds_max.shape)\n","print(Preds_max[0][0][0])"],"execution_count":16,"outputs":[{"output_type":"stream","text":["1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","(50, 224, 224, 1)\n","[2.]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TYMrSQoh0vtG","executionInfo":{"status":"ok","timestamp":1608872733670,"user_tz":-330,"elapsed":37063,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"0778aa3a-c6cf-44f3-e966-a80627f9922e"},"source":["from PIL import Image\n","import os\n","img = Image.new('RGB', (672,672))\n","\n","original = ['0.png', '1.png', '2.png', '3.png', '4.png', '5.png', '6.png', '7.png', '8.png']\n","print(original)\n","i,r,c=0,0,0\n","\n","for row in range(3):\n","  img1 = Image.new('RGB', (672, 224))\n","  off_set = 0\n","  for col in range(3):\n","    path = os.path.join('/content/gdrive/My Drive/good_gTruth/Test/bin/paper/touzi2bin_new_paper/', original[i])\n","    B = Image.open(path)\n","    i=i+1\n","    img1.paste(B, (off_set,0))\n","    print('done')\n","    off_set=off_set+224\n","    #img1.save('/content/gdrive/My Drive/good_gTruth/Test/random_7_paper/7_paper.jpg')\n","  img.paste(img1, (0,c))\n","  c+=224\n","\n","img.save('/content/gdrive/My Drive/good_gTruth/Test/bin/paper/touzi2bin_new_paper/touzi2bin_new_paper.jpg')"],"execution_count":17,"outputs":[{"output_type":"stream","text":["['0.png', '1.png', '2.png', '3.png', '4.png', '5.png', '6.png', '7.png', '8.png']\n","done\n","done\n","done\n","done\n","done\n","done\n","done\n","done\n","done\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vbY1xSFK2XIC"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CqJh-AehQZ5d"},"source":["Steps for confusion matrix"]},{"cell_type":"code","metadata":{"id":"uSHvxJGRQgYr"},"source":["def initialize_elements():\n","  from PIL import Image\n","  import os\n","  import numpy as np \n","  #original = ['T11.bin', 'T12_imag.bin', 'T12_real.bin', 'T13_imag.bin', 'T13_real.bin', 'T22.bin', 'T23_imag.bin', 'T23_real.bin', 'T33.bin']\n","  #original = ['Seven_Pv.bin', 'Seven_Ps.bin', 'Seven_Pod.bin', 'Seven_Pmd.bin', 'Seven_Ph.bin', 'Seven_Pd.bin', 'Seven_Pcd.bin']\n","  #original = ['Singh4_G4U2_Vol.bin', 'Singh4_G4U2_Odd.bin', 'Singh4_G4U2_Hlx.bin', 'Singh4_G4U2_Dbl.bin']\n","  #original = ['TSVM_alpha_s1.bin', 'TSVM_phi_s1.bin', 'TSVM_psi1.bin', 'TSVM_tau_m1.bin']\n","  #original = ['TSVM_alpha_s1.bin', 'TSVM_alpha_s2.bin', 'TSVM_phi_s1.bin', 'TSVM_phi_s2.bin', 'TSVM_psi1.bin', 'TSVM_psi2.bin', 'TSVM_tau_m1.bin', 'TSVM_tau_m2.bin']\n","  #original = ['T11.jp2', 'T12_imag.jp2', 'T12_real.jp2', 'T13_imag.jp2', 'T13_real.jp2', 'T22.jp2', 'T23_imag.jp2', 'T23_real.jp2', 'T33.jp2']\n","  original = ['Seven_Pv.jp2', 'Seven_Ps.jp2', 'Seven_Pod.jp2', 'Seven_Pmd.jp2', 'Seven_Ph.jp2', 'Seven_Pd.jp2', 'Seven_Pcd.jp2']\n","\n","  print(original) #['Seven_Pv.jp2', 'Seven_Ps.jp2', 'Seven_Pod.jp2', 'Seven_Pmd.jp2', 'Seven_Ph.jp2', 'Seven_Pd.jp2', 'Seven_Pcd.jp2']\n","  X_7B = np.zeros((1554,1228, 7), dtype = np.float32)\n","  i=0\n","\n","  #stacking the 7/4/9 layers\n","  for band in original:\n","    path = os.path.join('/content/gdrive/My Drive/good_gTruth/7_bands/', band)\n","    B = Image.open(path)\n","    X_7B[:,:,i]=B\n","    i=i+1\n","    #T = np.fromfile(band,  dtype=np.float32)\n","    #T= T.reshape(1554,1228)\n","    #X_7B[:,:,i]=T\n","    #i=i+1\n","\n","  print(X_7B.size) #13358184\n","  print(X_7B[0][0].size) #7\n","\n","  #Taking the masking as an input\n","  M_7B = np.zeros((1554,1228, 1), dtype = np.float32)\n","  path = os.path.join('/content/gdrive/My Drive/good_gTruth/', 'Label_1.png')\n","  B = Image.open(path)\n","  M_7B[:,:,0]=B\n","\n","  import numpy as np\n","  import os\n","  from PIL import Image\n","  from keras.utils import to_categorical\n","  mask = np.zeros((1554,1228), dtype = np.float32)\n","  M_7B_one = np.zeros((1554,1228, 6), dtype = np.float32)\n","  path = os.path.join('/content/gdrive/My Drive/good_gTruth/', 'Label_1.png')\n","  B = Image.open(path)\n","  encoded = to_categorical(B)\n","  #print(encoded)\n","  M_7B_one[:,:,:]=encoded\n","\n","  print(M_7B.size) #1908312\n","  print(M_7B[0][0].size) #1\n","  print(M_7B_one.size) #\n","\n","  #Creating tiles \n","  X = np.zeros((30, 224, 224, 7), dtype = np.float32)\n","  i=0\n","  pixel_row=0\n","  counter=1\n","  while pixel_row < 1344: \n","      pixel_col=0\n","      while pixel_col < 1120:\n","          pic_part = X_7B[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          X[i] = pic_part\n","          i = i+1\n","          pixel_col=pixel_col+224\n","          counter = counter+1\n","      pixel_row=pixel_row+224\n","\n","  print(X.shape) #(30, 224, 224, 7)\n","\n","  #creating tiles for masking as well\n","\n","  Y = np.zeros((30, 224, 224, 1), dtype = np.float32)\n","  Y_one = np.zeros((30, 224, 224, 6), dtype = np.float32)\n","  i=0\n","  pixel_row=0\n","  counter=1\n","  while pixel_row < 1344: \n","      pixel_col=0\n","      while pixel_col < 1120:\n","          pic_part = M_7B[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          Y[i] = pic_part\n","          Y_one[i] = M_7B_one[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          i = i+1\n","          pixel_col=pixel_col+224\n","          counter = counter+1\n","      pixel_row=pixel_row+224\n","\n","  print(Y.shape) #(30, 224, 224, 1)\n","  print(Y_one.shape) #\n","\n","\n","  return X, Y_one, Y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pLopGofBSeuC","executionInfo":{"status":"ok","timestamp":1608272478319,"user_tz":-330,"elapsed":11119,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"6a3c47d5-57b0-4bec-fbc2-3b57f4a7f20b"},"source":["X,Y, Y_n=initialize_elements()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['Seven_Pv.jp2', 'Seven_Ps.jp2', 'Seven_Pod.jp2', 'Seven_Pmd.jp2', 'Seven_Ph.jp2', 'Seven_Pd.jp2', 'Seven_Pcd.jp2']\n","13358184\n","7\n","1908312\n","1\n","11449872\n","(30, 224, 224, 7)\n","(30, 224, 224, 1)\n","(30, 224, 224, 6)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UHtPypsyZbRa"},"source":["**initialising for given test image**"]},{"cell_type":"code","metadata":{"id":"Pk1mAXHpX6wa","executionInfo":{"status":"ok","timestamp":1608877166906,"user_tz":-330,"elapsed":1245,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["def initialize_elements_cm_giventestimg():\n","  from PIL import Image\n","  import os\n","  import numpy as np \n","  #original = ['T11.bin', 'T12_imag.bin', 'T12_real.bin', 'T13_imag.bin', 'T13_real.bin', 'T22.bin', 'T23_imag.bin', 'T23_real.bin', 'T33.bin']\n","  #original = ['Seven_Pv.bin', 'Seven_Ps.bin', 'Seven_Pod.bin', 'Seven_Pmd.bin', 'Seven_Ph.bin', 'Seven_Pd.bin', 'Seven_Pcd.bin']\n","  #original = ['Singh4_G4U2_Vol.bin', 'Singh4_G4U2_Odd.bin', 'Singh4_G4U2_Hlx.bin', 'Singh4_G4U2_Dbl.bin']\n","  #original = ['TSVM_alpha_s1.bin', 'TSVM_phi_s1.bin', 'TSVM_psi1.bin', 'TSVM_tau_m1.bin']\n","  original = ['TSVM_alpha_s1.bin', 'TSVM_alpha_s2.bin', 'TSVM_phi_s1.bin', 'TSVM_phi_s2.bin', 'TSVM_psi1.bin', 'TSVM_psi2.bin', 'TSVM_tau_m1.bin', 'TSVM_tau_m2.bin']\n","  #original = ['T11.jp2', 'T12_imag.jp2', 'T12_real.jp2', 'T13_imag.jp2', 'T13_real.jp2', 'T22.jp2', 'T23_imag.jp2', 'T23_real.jp2', 'T33.jp2']\n","  #original = ['Seven_Pv.jp2', 'Seven_Ps.jp2', 'Seven_Pod.jp2', 'Seven_Pmd.jp2', 'Seven_Ph.jp2', 'Seven_Pd.jp2', 'Seven_Pcd.jp2']\n","\n","  print(original) #['Seven_Pv.jp2', 'Seven_Ps.jp2', 'Seven_Pod.jp2', 'Seven_Pmd.jp2', 'Seven_Ph.jp2', 'Seven_Pd.jp2', 'Seven_Pcd.jp2']\n","  X_7B = np.zeros((778,698, 8), dtype = np.float32)\n","  mainimg = np.zeros((1554,1228,8),dtype = np.float32)\n","  i=0\n","\n","  #stacking the 7/4/9 layers\n","  for band in original:\n","    #path = os.path.join('/content/gdrive/My Drive/good_gTruth/Touzi_binary/', band)\n","    #B = Image.open(path)\n","    #mainimg[:,:,i]=B\n","    #i=i+1\n","    T = np.fromfile(band,  dtype=np.float32)\n","    T= T.reshape(1554,1228)\n","    T = T[450:1228, 450:1148]\n","    X_7B[:,:,i]=T\n","    i=i+1\n","  #X_7B = mainimg[450:1228, 450:1148,:]\n","\n","  print(X_7B.size) #13358184\n","  print(X_7B[0][0].size) #7\n","\n","  #Taking the masking as an input\n","  M_7B = np.zeros((778,698, 1), dtype = np.float32)\n","  maskedimg = np.zeros((1554,1228,1),dtype = np.float32)\n","  path = os.path.join('/content/gdrive/My Drive/good_gTruth/', 'Label_1.png')\n","  B = Image.open(path)\n","  maskedimg[:,:,0]=B\n","  M_7B = maskedimg[450:1228, 450:1148,:]\n","\n","  print(M_7B.size) #1908312\n","  print(M_7B[0][0].size) #1\n","\n","  #Creating tiles \n","  X = np.zeros((9, 224, 224, 8), dtype = np.float32)\n","  i=0\n","  pixel_row=0\n","  counter=1\n","  while pixel_row < 672: \n","      pixel_col=0\n","      while pixel_col < 672:\n","          pic_part = X_7B[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          X[i] = pic_part\n","          i = i+1\n","          pixel_col=pixel_col+224\n","          counter = counter+1\n","      pixel_row=pixel_row+224\n","\n","  print(X.shape) #(9, 224, 224, 7)\n","\n","  #creating tiles for masking as well\n","\n","  Y = np.zeros((9, 224, 224, 1), dtype = np.float32)\n","  i=0\n","  pixel_row=0\n","  counter=1\n","  while pixel_row < 672: \n","      pixel_col=0\n","      while pixel_col < 672:\n","          pic_part = M_7B[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          Y[i] = pic_part\n","          i = i+1\n","          pixel_col=pixel_col+224\n","          counter = counter+1\n","      pixel_row=pixel_row+224\n","\n","  print(Y.shape) #(30, 224, 224, 1)\n","\n","\n","  return X, Y"],"execution_count":69,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vr2aaoglZvaY","executionInfo":{"status":"ok","timestamp":1608877166909,"user_tz":-330,"elapsed":838,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"df510287-4e1c-4f9f-c8d1-da170b6b2ce4"},"source":["X,Y=initialize_elements_cm_giventestimg()"],"execution_count":70,"outputs":[{"output_type":"stream","text":["['TSVM_alpha_s1.bin', 'TSVM_alpha_s2.bin', 'TSVM_phi_s1.bin', 'TSVM_phi_s2.bin', 'TSVM_psi1.bin', 'TSVM_psi2.bin', 'TSVM_tau_m1.bin', 'TSVM_tau_m2.bin']\n","4344352\n","8\n","543044\n","1\n","(9, 224, 224, 8)\n","(9, 224, 224, 1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"01EE62tFSiX0","executionInfo":{"status":"ok","timestamp":1608877181455,"user_tz":-330,"elapsed":6218,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["from tensorflow import keras\n","import tensorflow as tf\n","\n","model = keras.models.load_model(\"/content/gdrive/My Drive/good_gTruth/Models/model_touzi2bin_1.h5\")"],"execution_count":71,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D3TtMsuGTV2D","executionInfo":{"status":"ok","timestamp":1608877186118,"user_tz":-330,"elapsed":2713,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"ae5845e2-d4ab-44aa-8ed3-dd2d11710824"},"source":["preds = model.predict(X)\n","\n","import numpy as np\n","from PIL import Image\n","\n","Preds_max = np.zeros((9, 224, 224, 1), dtype = np.float32)\n","p=0\n","\n","for one in preds:\n","  #print(one.shape)\n","  #print(one[0][0][0])\n","  for i in range(224):\n","    for j in range(224):\n","      Preds_max[p][i][j] = np.argmax(one[i][j])\n","  p=p+1\n","  print(p)\n","\n","print(Preds_max.shape)\n","print(Preds_max[0][0][0])"],"execution_count":72,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:6 out of the last 7 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7f1d55068158> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","(9, 224, 224, 1)\n","[2.]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uiyqRJ72HRBO","executionInfo":{"status":"ok","timestamp":1608877186119,"user_tz":-330,"elapsed":686,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["preds = Preds_max.reshape(-1)\n","#y = Y_n.reshape(-1)\n","y= Y.reshape(-1)"],"execution_count":73,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l1WURbVzUZrb","executionInfo":{"status":"ok","timestamp":1608877189674,"user_tz":-330,"elapsed":2707,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"be4fbda9-a0ba-4baf-a496-4cd04e0d331c"},"source":["from sklearn.metrics import confusion_matrix\n","print(confusion_matrix(preds, y, labels=[0,1,2,3,4,5]))"],"execution_count":74,"outputs":[{"output_type":"stream","text":["[[     7      5      2      0      7      0]\n"," [   427  51079    349    471   1328    115]\n"," [   418    187 205702   1520   4904    184]\n"," [   297    423   1232  98021   1060      6]\n"," [   649   1979   2550    305  65619   1576]\n"," [    43     34    316     56    520  10193]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dGE5X7JgUqoV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608877193104,"user_tz":-330,"elapsed":984,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"01a7851e-3c18-4098-f7e2-526a023c410b"},"source":["C = confusion_matrix(preds, y)\n","#np.around(C.astype('float') / C.sum(axis=1)[:, np.newaxis], decimals=2)\n","\n","print(np.around(C.astype('float') / C.sum(axis=1)[:, np.newaxis], decimals=3))"],"execution_count":75,"outputs":[{"output_type":"stream","text":["[[0.333 0.238 0.095 0.    0.333 0.   ]\n"," [0.008 0.95  0.006 0.009 0.025 0.002]\n"," [0.002 0.001 0.966 0.007 0.023 0.001]\n"," [0.003 0.004 0.012 0.97  0.01  0.   ]\n"," [0.009 0.027 0.035 0.004 0.903 0.022]\n"," [0.004 0.003 0.028 0.005 0.047 0.913]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TZXR5en5xBEs","executionInfo":{"status":"ok","timestamp":1608877196501,"user_tz":-330,"elapsed":1095,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"d7507c4c-6a89-4a06-e292-1cf3156f5baf"},"source":["print(C[1:])\n","print(C[1:,1:])"],"execution_count":76,"outputs":[{"output_type":"stream","text":["[[   427  51079    349    471   1328    115]\n"," [   418    187 205702   1520   4904    184]\n"," [   297    423   1232  98021   1060      6]\n"," [   649   1979   2550    305  65619   1576]\n"," [    43     34    316     56    520  10193]]\n","[[ 51079    349    471   1328    115]\n"," [   187 205702   1520   4904    184]\n"," [   423   1232  98021   1060      6]\n"," [  1979   2550    305  65619   1576]\n"," [    34    316     56    520  10193]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"q8fVHPjILrXg","executionInfo":{"status":"ok","timestamp":1608877197883,"user_tz":-330,"elapsed":930,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["import numpy as np\n","\n","\n","def plot_confusion_matrix(cm,\n","                          target_names,\n","                          title='Confusion matrix',\n","                          cmap=None,\n","                          normalize=True):\n","    \"\"\"\n","    given a sklearn confusion matrix (cm), make a nice plot\n","\n","    Arguments\n","    ---------\n","    cm:           confusion matrix from sklearn.metrics.confusion_matrix\n","\n","    target_names: given classification classes such as [0, 1, 2]\n","                  the class names, for example: ['high', 'medium', 'low']\n","\n","    title:        the text to display at the top of the matrix\n","\n","    cmap:         the gradient of the values displayed from matplotlib.pyplot.cm\n","                  see http://matplotlib.org/examples/color/colormaps_reference.html\n","                  plt.get_cmap('jet') or plt.cm.Blues\n","\n","    normalize:    If False, plot the raw numbers\n","                  If True, plot the proportions\n","\n","    Usage\n","    -----\n","    plot_confusion_matrix(cm           = cm,                  # confusion matrix created by\n","                                                              # sklearn.metrics.confusion_matrix\n","                          normalize    = True,                # show proportions\n","                          target_names = y_labels_vals,       # list of names of the classes\n","                          title        = best_estimator_name) # title of graph\n","\n","    Citiation\n","    ---------\n","    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html\n","\n","    \"\"\"\n","    import matplotlib.pyplot as plt\n","    import numpy as np\n","    import itertools\n","\n","    accuracy = np.trace(cm) / np.sum(cm).astype('float')\n","    misclass = 1 - accuracy\n","    cm = np.around(cm[1:,1:].astype('float') / cm[1:,1:].sum(axis=1)[:, np.newaxis], decimals=3)\n","\n","    if cmap is None:\n","        cmap = plt.get_cmap('Blues')\n","\n","    plt.figure(figsize=(8, 6))\n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","\n","    if target_names is not None:\n","        tick_marks = np.arange(len(target_names))\n","        plt.xticks(tick_marks, target_names, rotation=45)\n","        plt.yticks(tick_marks, target_names)\n","\n","    if normalize:\n","        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n","\n","\n","    thresh = cm.max() / 1.5 if normalize else cm.max() / 2\n","    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","        if normalize:\n","            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n","                     horizontalalignment=\"center\",\n","                     color=\"white\" if cm[i, j] > thresh else \"black\")\n","        else:\n","            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n","                     horizontalalignment=\"center\",\n","                     color=\"white\" if cm[i, j] > thresh else \"black\")\n","\n","\n","    plt.tight_layout()\n","    plt.ylabel('True label')\n","    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n","    plt.show()\n"],"execution_count":77,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"id":"jUFUBc7JMGxz","executionInfo":{"status":"ok","timestamp":1608877199208,"user_tz":-330,"elapsed":1616,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"59b54da0-1de7-42aa-95cb-872d3e6029ae"},"source":["labels = [0,1,2,3,4,5]\n","l = ['ocean','settlement','forest','mangroves','agriculture']\n","plot_confusion_matrix(C,l,title='Confusion matrix',cmap = None, normalize=True)"],"execution_count":78,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x432 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ol3VG-GHMNIm"},"source":["\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Gz-yx8QieVwG"},"source":["**Converting binary complex file into magnitude and phase**"]},{"cell_type":"code","metadata":{"id":"Hsj9C-Qvd7fy"},"source":["#To open a binary file\n","import numpy as np\n","#here the input is in 1-D array so we need to convert it into our required dimensions\n","T = np.fromfile('CCC.bin',  dtype=np.float32)\n","#to change 1-D into the required dimension\n","T= T.reshape(1554,1228)\n","\n","#To write into a binary file\n","# reshape the array into 1-D again\n","T = T.reshape(-1)\n","#open the binary file you want to write in \n","f = open(\"file_name.bin\", \"bw\")\n","# finally write into the file using .tofile from numpy library\n","T.tofile(f)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"px9M1CPGw7cd","executionInfo":{"status":"ok","timestamp":1608874940987,"user_tz":-330,"elapsed":1026,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["T = np.fromfile('CCC.bin',  dtype=np.float32)\n","T= T.reshape(1554,2456)"],"execution_count":28,"outputs":[]},{"cell_type":"code","metadata":{"id":"gu8fVYJJZ9wI","executionInfo":{"status":"ok","timestamp":1608874737954,"user_tz":-330,"elapsed":1050,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["Y = T\n","Y = Y.reshape(-1)\n","T = np.fromfile('CCC.bin',  dtype=np.float32)\n","if T.all() == Y.all(): \n","  print('same')"],"execution_count":24,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_oZFrKUTUd6z","executionInfo":{"status":"ok","timestamp":1608655191006,"user_tz":-330,"elapsed":1037,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"c4807066-e68d-4d1e-d27d-7fe624a5e783"},"source":["print(T[0,0])\n","print(T[0,1])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["-0.7337403\n","-0.005514686\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"eDAbtI2KhBKW","executionInfo":{"status":"ok","timestamp":1608874946301,"user_tz":-330,"elapsed":1015,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["import math \n","import cmath\n","row,r,c,col=0,0,0,0\n","mag = np.zeros((1554, 1228), dtype=np.float32)\n","phase = np.zeros((1554, 1228), dtype=np.float32)\n","while row<1554:\n","  while col<2456:\n","    z = complex(T[row,col],T[row,col+1])\n","    mag[r,c] = abs(z)\n","    phase[r,c] = cmath.phase(z)\n","    c+=1\n","    col+=2\n","  row+=1\n","  r+=1"],"execution_count":29,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QgyFnC6xju1L","executionInfo":{"status":"ok","timestamp":1608874953715,"user_tz":-330,"elapsed":1206,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"3dedf557-025b-465f-c686-b0bb4247a000"},"source":["print(mag[0,0])\n","print(phase[0,0])"],"execution_count":30,"outputs":[{"output_type":"stream","text":["0.7337611\n","-3.1340768\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ax7m2YNVvj-1","executionInfo":{"status":"ok","timestamp":1608875094274,"user_tz":-330,"elapsed":947,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["mag = mag.reshape(-1)\n","phase = phase.reshape(-1)\n","fm = open(\"magnitudeCCC.bin\", \"bw\")\n","mag.tofile(fm)\n","fp = open(\"phaseCCC.bin\", \"bw\")\n","phase.tofile(fp)"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BKon26dqbaz3","executionInfo":{"status":"ok","timestamp":1608875227840,"user_tz":-330,"elapsed":1350,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"69b25a0e-9b19-44f2-e181-4a130a7cca7f"},"source":["T = np.fromfile('magnitudeCCC.bin',  dtype=np.float32)\n","T= T.reshape(1554,1228)\n","print(T[0,0])"],"execution_count":33,"outputs":[{"output_type":"stream","text":["0.7337611\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PeGGYm6yb3f-"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rLK9IBO-1hiZ"},"source":["**Select limited tiles for testing**"]},{"cell_type":"code","metadata":{"id":"wwCRHVZT2O7C","executionInfo":{"status":"ok","timestamp":1609398434826,"user_tz":-330,"elapsed":637,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["import random \n","  \n","# Function to generate \n","# and append them  \n","# start = starting range, \n","# end = ending range \n","# num = number of  \n","# elements needs to be appended \n","def Rand(start, end, num): \n","  res = [] \n","  \n","  for j in range(num): \n","    r = random.randint(start, end)\n","    while r in res:\n","      r = random.randint(start, end)\n","    res.append(r) \n","  \n","  return res \n"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"NC-wND7a3h_g","executionInfo":{"status":"ok","timestamp":1609401067270,"user_tz":-330,"elapsed":1019,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["def selected_tiles(l, X, size):\n","  i,k,m=0,0,0\n","  X_test = np.zeros((50, 224, 224, size), dtype = np.float32)\n","  X_train = np.zeros((200, 224, 224, size), dtype = np.float32)\n","  while i < 250:\n","    if i in l:\n","      X_test[k] = X[i]\n","      k+=1\n","      print('k:', k)\n","    if i not in l:\n","      X_train[m] = X[i]\n","      m+=1\n","      print('m:', m)\n","    #print(i)\n","    i+=1\n","  \n","  return X_test, X_train"],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"id":"YPn2YMSZ1kWj","executionInfo":{"status":"ok","timestamp":1609402625603,"user_tz":-330,"elapsed":1096,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}}},"source":["def initialize_elements():\n","  from PIL import Image\n","  import os\n","  import numpy as np \n","  import math \n","  import cmath\n","  #original = ['T11.bin', 'T12_imag.bin', 'T12_real.bin', 'T13_imag.bin', 'T13_real.bin', 'T22.bin', 'T23_imag.bin', 'T23_real.bin', 'T33.bin', 'span.bin']\n","  #original = ['Seven_Pv.bin', 'Seven_Ps.bin', 'Seven_Pod.bin', 'Seven_Pmd.bin', 'Seven_Ph.bin', 'Seven_Pd.bin', 'Seven_Pcd.bin']\n","  original = ['Singh4_G4U2_Vol.bin', 'Singh4_G4U2_Odd.bin', 'Singh4_G4U2_Hlx.bin', 'Singh4_G4U2_Dbl.bin']\n","  #original = ['TSVM_alpha_s1.bin', 'TSVM_phi_s1.bin', 'TSVM_psi1.bin', 'TSVM_tau_m1.bin', 'span.bin']\n","  #original = ['TSVM_alpha_s1.bin', 'TSVM_alpha_s2.bin', 'TSVM_phi_s1.bin', 'TSVM_phi_s2.bin', 'TSVM_psi1.bin', 'TSVM_psi2.bin', 'TSVM_tau_m1.bin', 'TSVM_tau_m2.bin', 'span.bin']\n","  #original = ['TSVM_alpha_s1.jp2', 'TSVM_phi_s1.jp2', 'TSVM_psi1.jp2', 'TSVM_tau_m1.jp2']\n","\n","  print(original) #['Seven_Pv.jp2', 'Seven_Ps.jp2', 'Seven_Pod.jp2', 'Seven_Pmd.jp2', 'Seven_Ph.jp2', 'Seven_Pd.jp2', 'Seven_Pcd.jp2']\n","  X_7B = np.zeros((1554,1228, 4), dtype = np.float32)\n","  i=0\n","\n","  #stacking the 7/4/9 layers\n","  for band in original:\n","    T = np.fromfile(band,  dtype=np.float32)\n","    T= T.reshape(1554,1228)\n","    X_7B[:,:,i]=T\n","    i=i+1\n","\n","  print(X_7B.size) #13358184\n","  print(X_7B[0][0].size) #7\n","\n","  #Taking the masking as an input\n","  M_7B = np.zeros((1554,1228, 1), dtype = np.float32)\n","  path = os.path.join('/content/gdrive/My Drive/good_gTruth/', 'Label_1.png')\n","  B = Image.open(path)\n","  M_7B[:,:,0]=B\n","\n","  import numpy as np\n","  import os\n","  from PIL import Image\n","  from keras.utils import to_categorical\n","  mask = np.zeros((1554,1228), dtype = np.float32)\n","  M_7B_one = np.zeros((1554,1228, 6), dtype = np.float32)\n","  path = os.path.join('/content/gdrive/My Drive/good_gTruth/', 'Label_1.png')\n","  B = Image.open(path)\n","  encoded = to_categorical(B)\n","  #print(encoded)\n","  M_7B_one[:,:,:]=encoded\n","\n","  print(M_7B.size) #1908312\n","  print(M_7B[0][0].size) #1\n","  print(M_7B_one.size) #\n","\n","  #Creating overlapping tiles \n","  X = np.zeros((250, 224, 224, 4), dtype = np.float32)\n","  i=0\n","  pixel_row=0\n","  counter=1\n","  while pixel_row < 1329: \n","      pixel_col=0\n","      while pixel_col < 1005:\n","          pic_part = X_7B[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          X[i] = pic_part\n","          i = i+1\n","          pixel_col=pixel_col+111\n","          counter = counter+1\n","      pixel_row=pixel_row+55\n","\n","  print(X.shape) #(250, 224, 224, 10)\n","\n","  #creating tiles for masking as well\n","\n","  Y = np.zeros((250, 224, 224, 1), dtype = np.float32)\n","  Y_one = np.zeros((250, 224, 224, 6), dtype = np.float32)\n","  i=0\n","  pixel_row=0\n","  counter=1\n","  while pixel_row < 1329: \n","      pixel_col=0\n","      while pixel_col < 1005:\n","          pic_part = M_7B[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          Y[i] = pic_part\n","          Y_one[i] = M_7B_one[pixel_row:(pixel_row+224), pixel_col:(pixel_col+224),:]\n","          i = i+1\n","          pixel_col=pixel_col+111\n","          counter = counter+1\n","      pixel_row=pixel_row+55\n","\n","  print(Y.shape) #(250, 224, 224, 1)\n","  print(Y_one.shape) #\n","\n","\n","  #l = Rand(0,250,50)\n","  l = [247, 44, 230, 57, 85, 182, 199, 241, 27, 106, 123, 53, 117, 87, 213, 210, 162, 224, 45, 63, 205, 78, 14, 55, 59, 155, 172, 16, 74, 5, 22, 7, 86, 156, 103, 60, 109, 79, 101, 227, 186, 233, 215, 56, 72, 192, 94, 119, 112, 214]\n","  print(l)\n","  X_test, X_train = selected_tiles(l, X, 4)\n","  Y_test, Y_train = selected_tiles(l, Y_one, 6)\n","\n","  from sklearn.model_selection import train_test_split\n","\n","  X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.20,train_size =0.80)  \n","\n","  print(X_train.shape)\n","  print(X_val.shape)\n","  print(X_test.shape)\n","\n","  #(160, 224, 224, 7)\n","  #(40, 224, 224, 7)\n","  #(50, 224, 224, 7)\n","  \n","  print(Y_train.shape)\n","  print(Y_val.shape)\n","  print(Y_test.shape)\n","\n","  #(160, 224, 224, 1)\n","  #(40, 224, 224, 1)\n","  #(50, 224, 224, 1)\n","\n","  return X_train, X_val, X_test, Y_train, Y_val, Y_test"],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QQQjBP8j4gr1","executionInfo":{"status":"ok","timestamp":1609402632638,"user_tz":-330,"elapsed":7632,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"3598ba7c-3941-47e3-be48-f02fb146561f"},"source":["X_train, X_val, X_test, Y_train, Y_val, Y_test = initialize_elements()"],"execution_count":46,"outputs":[{"output_type":"stream","text":["['Singh4_G4U2_Vol.bin', 'Singh4_G4U2_Odd.bin', 'Singh4_G4U2_Hlx.bin', 'Singh4_G4U2_Dbl.bin']\n","7633248\n","4\n","1908312\n","1\n","11449872\n","(250, 224, 224, 4)\n","(250, 224, 224, 1)\n","(250, 224, 224, 6)\n","[247, 44, 230, 57, 85, 182, 199, 241, 27, 106, 123, 53, 117, 87, 213, 210, 162, 224, 45, 63, 205, 78, 14, 55, 59, 155, 172, 16, 74, 5, 22, 7, 86, 156, 103, 60, 109, 79, 101, 227, 186, 233, 215, 56, 72, 192, 94, 119, 112, 214]\n","m: 1\n","m: 2\n","m: 3\n","m: 4\n","m: 5\n","k: 1\n","m: 6\n","k: 2\n","m: 7\n","m: 8\n","m: 9\n","m: 10\n","m: 11\n","m: 12\n","k: 3\n","m: 13\n","k: 4\n","m: 14\n","m: 15\n","m: 16\n","m: 17\n","m: 18\n","k: 5\n","m: 19\n","m: 20\n","m: 21\n","m: 22\n","k: 6\n","m: 23\n","m: 24\n","m: 25\n","m: 26\n","m: 27\n","m: 28\n","m: 29\n","m: 30\n","m: 31\n","m: 32\n","m: 33\n","m: 34\n","m: 35\n","m: 36\n","m: 37\n","m: 38\n","k: 7\n","k: 8\n","m: 39\n","m: 40\n","m: 41\n","m: 42\n","m: 43\n","m: 44\n","m: 45\n","k: 9\n","m: 46\n","k: 10\n","k: 11\n","k: 12\n","m: 47\n","k: 13\n","k: 14\n","m: 48\n","m: 49\n","k: 15\n","m: 50\n","m: 51\n","m: 52\n","m: 53\n","m: 54\n","m: 55\n","m: 56\n","m: 57\n","k: 16\n","m: 58\n","k: 17\n","m: 59\n","m: 60\n","m: 61\n","k: 18\n","k: 19\n","m: 62\n","m: 63\n","m: 64\n","m: 65\n","m: 66\n","k: 20\n","k: 21\n","k: 22\n","m: 67\n","m: 68\n","m: 69\n","m: 70\n","m: 71\n","m: 72\n","k: 23\n","m: 73\n","m: 74\n","m: 75\n","m: 76\n","m: 77\n","m: 78\n","k: 24\n","m: 79\n","k: 25\n","m: 80\n","m: 81\n","k: 26\n","m: 82\n","m: 83\n","k: 27\n","m: 84\n","m: 85\n","k: 28\n","m: 86\n","m: 87\n","m: 88\n","m: 89\n","k: 29\n","m: 90\n","k: 30\n","m: 91\n","m: 92\n","m: 93\n","k: 31\n","m: 94\n","m: 95\n","m: 96\n","m: 97\n","m: 98\n","m: 99\n","m: 100\n","m: 101\n","m: 102\n","m: 103\n","m: 104\n","m: 105\n","m: 106\n","m: 107\n","m: 108\n","m: 109\n","m: 110\n","m: 111\n","m: 112\n","m: 113\n","m: 114\n","m: 115\n","m: 116\n","m: 117\n","m: 118\n","m: 119\n","m: 120\n","m: 121\n","m: 122\n","m: 123\n","m: 124\n","k: 32\n","k: 33\n","m: 125\n","m: 126\n","m: 127\n","m: 128\n","m: 129\n","k: 34\n","m: 130\n","m: 131\n","m: 132\n","m: 133\n","m: 134\n","m: 135\n","m: 136\n","m: 137\n","m: 138\n","k: 35\n","m: 139\n","m: 140\n","m: 141\n","m: 142\n","m: 143\n","m: 144\n","m: 145\n","m: 146\n","m: 147\n","k: 36\n","m: 148\n","m: 149\n","m: 150\n","k: 37\n","m: 151\n","m: 152\n","m: 153\n","m: 154\n","m: 155\n","k: 38\n","m: 156\n","m: 157\n","m: 158\n","m: 159\n","m: 160\n","m: 161\n","k: 39\n","m: 162\n","m: 163\n","m: 164\n","m: 165\n","m: 166\n","k: 40\n","m: 167\n","m: 168\n","m: 169\n","m: 170\n","k: 41\n","m: 171\n","m: 172\n","k: 42\n","k: 43\n","k: 44\n","m: 173\n","m: 174\n","m: 175\n","m: 176\n","m: 177\n","m: 178\n","m: 179\n","m: 180\n","k: 45\n","m: 181\n","m: 182\n","k: 46\n","m: 183\n","m: 184\n","k: 47\n","m: 185\n","m: 186\n","k: 48\n","m: 187\n","m: 188\n","m: 189\n","m: 190\n","m: 191\n","m: 192\n","m: 193\n","k: 49\n","m: 194\n","m: 195\n","m: 196\n","m: 197\n","m: 198\n","k: 50\n","m: 199\n","m: 200\n","m: 1\n","m: 2\n","m: 3\n","m: 4\n","m: 5\n","k: 1\n","m: 6\n","k: 2\n","m: 7\n","m: 8\n","m: 9\n","m: 10\n","m: 11\n","m: 12\n","k: 3\n","m: 13\n","k: 4\n","m: 14\n","m: 15\n","m: 16\n","m: 17\n","m: 18\n","k: 5\n","m: 19\n","m: 20\n","m: 21\n","m: 22\n","k: 6\n","m: 23\n","m: 24\n","m: 25\n","m: 26\n","m: 27\n","m: 28\n","m: 29\n","m: 30\n","m: 31\n","m: 32\n","m: 33\n","m: 34\n","m: 35\n","m: 36\n","m: 37\n","m: 38\n","k: 7\n","k: 8\n","m: 39\n","m: 40\n","m: 41\n","m: 42\n","m: 43\n","m: 44\n","m: 45\n","k: 9\n","m: 46\n","k: 10\n","k: 11\n","k: 12\n","m: 47\n","k: 13\n","k: 14\n","m: 48\n","m: 49\n","k: 15\n","m: 50\n","m: 51\n","m: 52\n","m: 53\n","m: 54\n","m: 55\n","m: 56\n","m: 57\n","k: 16\n","m: 58\n","k: 17\n","m: 59\n","m: 60\n","m: 61\n","k: 18\n","k: 19\n","m: 62\n","m: 63\n","m: 64\n","m: 65\n","m: 66\n","k: 20\n","k: 21\n","k: 22\n","m: 67\n","m: 68\n","m: 69\n","m: 70\n","m: 71\n","m: 72\n","k: 23\n","m: 73\n","m: 74\n","m: 75\n","m: 76\n","m: 77\n","m: 78\n","k: 24\n","m: 79\n","k: 25\n","m: 80\n","m: 81\n","k: 26\n","m: 82\n","m: 83\n","k: 27\n","m: 84\n","m: 85\n","k: 28\n","m: 86\n","m: 87\n","m: 88\n","m: 89\n","k: 29\n","m: 90\n","k: 30\n","m: 91\n","m: 92\n","m: 93\n","k: 31\n","m: 94\n","m: 95\n","m: 96\n","m: 97\n","m: 98\n","m: 99\n","m: 100\n","m: 101\n","m: 102\n","m: 103\n","m: 104\n","m: 105\n","m: 106\n","m: 107\n","m: 108\n","m: 109\n","m: 110\n","m: 111\n","m: 112\n","m: 113\n","m: 114\n","m: 115\n","m: 116\n","m: 117\n","m: 118\n","m: 119\n","m: 120\n","m: 121\n","m: 122\n","m: 123\n","m: 124\n","k: 32\n","k: 33\n","m: 125\n","m: 126\n","m: 127\n","m: 128\n","m: 129\n","k: 34\n","m: 130\n","m: 131\n","m: 132\n","m: 133\n","m: 134\n","m: 135\n","m: 136\n","m: 137\n","m: 138\n","k: 35\n","m: 139\n","m: 140\n","m: 141\n","m: 142\n","m: 143\n","m: 144\n","m: 145\n","m: 146\n","m: 147\n","k: 36\n","m: 148\n","m: 149\n","m: 150\n","k: 37\n","m: 151\n","m: 152\n","m: 153\n","m: 154\n","m: 155\n","k: 38\n","m: 156\n","m: 157\n","m: 158\n","m: 159\n","m: 160\n","m: 161\n","k: 39\n","m: 162\n","m: 163\n","m: 164\n","m: 165\n","m: 166\n","k: 40\n","m: 167\n","m: 168\n","m: 169\n","m: 170\n","k: 41\n","m: 171\n","m: 172\n","k: 42\n","k: 43\n","k: 44\n","m: 173\n","m: 174\n","m: 175\n","m: 176\n","m: 177\n","m: 178\n","m: 179\n","m: 180\n","k: 45\n","m: 181\n","m: 182\n","k: 46\n","m: 183\n","m: 184\n","k: 47\n","m: 185\n","m: 186\n","k: 48\n","m: 187\n","m: 188\n","m: 189\n","m: 190\n","m: 191\n","m: 192\n","m: 193\n","k: 49\n","m: 194\n","m: 195\n","m: 196\n","m: 197\n","m: 198\n","k: 50\n","m: 199\n","m: 200\n","(160, 224, 224, 4)\n","(40, 224, 224, 4)\n","(50, 224, 224, 4)\n","(160, 224, 224, 6)\n","(40, 224, 224, 6)\n","(50, 224, 224, 6)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"skwfCyi5nsg7","executionInfo":{"status":"ok","timestamp":1609403016998,"user_tz":-330,"elapsed":373358,"user":{"displayName":"Zoohi checker","photoUrl":"","userId":"07609216712548009611"}},"outputId":"e6fb05cf-e57d-4ff6-ab4c-e7bb7ef84f60"},"source":["model = unet_model(n_classes=6, im_sz=224, n_channels=4, n_filters_start=32, growth_factor=2, upconv=True,\n","               class_weights=[0.4894, 0.5044, 1.0000, 1.1585, 1.3453, 0.01])\n","model.fit(X_train, Y_train, batch_size=10, epochs=100, shuffle=True,\n","                  validation_data=(X_val, Y_val))"],"execution_count":47,"outputs":[{"output_type":"stream","text":["Epoch 1/100\n","16/16 [==============================] - 6s 245ms/step - loss: 1.4147 - accuracy: 0.5037 - val_loss: 2.4121 - val_accuracy: 0.3731\n","Epoch 2/100\n","16/16 [==============================] - 4s 220ms/step - loss: 0.9123 - accuracy: 0.6577 - val_loss: 3.2733 - val_accuracy: 0.3769\n","Epoch 3/100\n","16/16 [==============================] - 4s 222ms/step - loss: 0.7752 - accuracy: 0.7319 - val_loss: 1.2729 - val_accuracy: 0.5673\n","Epoch 4/100\n","16/16 [==============================] - 4s 222ms/step - loss: 0.6844 - accuracy: 0.7649 - val_loss: 1.2117 - val_accuracy: 0.6280\n","Epoch 5/100\n","16/16 [==============================] - 4s 224ms/step - loss: 0.6869 - accuracy: 0.7796 - val_loss: 1.1712 - val_accuracy: 0.5700\n","Epoch 6/100\n","16/16 [==============================] - 4s 225ms/step - loss: 0.6456 - accuracy: 0.7787 - val_loss: 1.1476 - val_accuracy: 0.6372\n","Epoch 7/100\n","16/16 [==============================] - 4s 226ms/step - loss: 0.6291 - accuracy: 0.7885 - val_loss: 1.0859 - val_accuracy: 0.6336\n","Epoch 8/100\n","16/16 [==============================] - 4s 227ms/step - loss: 0.6093 - accuracy: 0.7999 - val_loss: 1.0704 - val_accuracy: 0.6334\n","Epoch 9/100\n","16/16 [==============================] - 4s 228ms/step - loss: 0.6207 - accuracy: 0.7916 - val_loss: 1.0776 - val_accuracy: 0.5750\n","Epoch 10/100\n","16/16 [==============================] - 4s 229ms/step - loss: 0.5739 - accuracy: 0.8039 - val_loss: 0.8650 - val_accuracy: 0.6649\n","Epoch 11/100\n","16/16 [==============================] - 4s 230ms/step - loss: 0.5244 - accuracy: 0.8226 - val_loss: 0.9593 - val_accuracy: 0.6422\n","Epoch 12/100\n","16/16 [==============================] - 4s 230ms/step - loss: 0.5328 - accuracy: 0.8147 - val_loss: 1.0279 - val_accuracy: 0.6471\n","Epoch 13/100\n","16/16 [==============================] - 4s 239ms/step - loss: 0.5812 - accuracy: 0.7989 - val_loss: 1.0260 - val_accuracy: 0.6047\n","Epoch 14/100\n","16/16 [==============================] - 4s 231ms/step - loss: 0.5692 - accuracy: 0.8000 - val_loss: 0.8741 - val_accuracy: 0.6585\n","Epoch 15/100\n","16/16 [==============================] - 4s 231ms/step - loss: 0.5220 - accuracy: 0.8273 - val_loss: 1.1885 - val_accuracy: 0.4645\n","Epoch 16/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.4692 - accuracy: 0.8417 - val_loss: 0.8763 - val_accuracy: 0.6842\n","Epoch 17/100\n","16/16 [==============================] - 4s 231ms/step - loss: 0.5238 - accuracy: 0.8236 - val_loss: 0.9412 - val_accuracy: 0.6113\n","Epoch 18/100\n","16/16 [==============================] - 4s 231ms/step - loss: 0.5105 - accuracy: 0.8243 - val_loss: 0.8091 - val_accuracy: 0.6841\n","Epoch 19/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.4930 - accuracy: 0.8364 - val_loss: 0.9402 - val_accuracy: 0.6015\n","Epoch 20/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.4806 - accuracy: 0.8404 - val_loss: 0.9576 - val_accuracy: 0.5884\n","Epoch 21/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.4864 - accuracy: 0.8355 - val_loss: 0.8486 - val_accuracy: 0.6794\n","Epoch 22/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.4807 - accuracy: 0.8372 - val_loss: 0.8753 - val_accuracy: 0.6683\n","Epoch 23/100\n","16/16 [==============================] - 4s 235ms/step - loss: 0.4342 - accuracy: 0.8541 - val_loss: 0.7938 - val_accuracy: 0.7060\n","Epoch 24/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.4604 - accuracy: 0.8447 - val_loss: 1.0805 - val_accuracy: 0.6573\n","Epoch 25/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.4357 - accuracy: 0.8554 - val_loss: 0.8829 - val_accuracy: 0.6884\n","Epoch 26/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.4534 - accuracy: 0.8456 - val_loss: 0.7951 - val_accuracy: 0.7186\n","Epoch 27/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.4401 - accuracy: 0.8512 - val_loss: 0.6072 - val_accuracy: 0.8002\n","Epoch 28/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.4819 - accuracy: 0.8354 - val_loss: 0.6221 - val_accuracy: 0.7799\n","Epoch 29/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.4246 - accuracy: 0.8580 - val_loss: 0.6785 - val_accuracy: 0.7520\n","Epoch 30/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.4227 - accuracy: 0.8578 - val_loss: 1.6130 - val_accuracy: 0.4361\n","Epoch 31/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.4509 - accuracy: 0.8482 - val_loss: 0.6273 - val_accuracy: 0.7844\n","Epoch 32/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.4092 - accuracy: 0.8643 - val_loss: 1.0365 - val_accuracy: 0.6174\n","Epoch 33/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.4017 - accuracy: 0.8630 - val_loss: 0.6665 - val_accuracy: 0.7715\n","Epoch 34/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.3850 - accuracy: 0.8721 - val_loss: 0.7602 - val_accuracy: 0.7401\n","Epoch 35/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.3670 - accuracy: 0.8752 - val_loss: 0.6179 - val_accuracy: 0.7911\n","Epoch 36/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.3434 - accuracy: 0.8853 - val_loss: 0.6213 - val_accuracy: 0.7860\n","Epoch 37/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.3592 - accuracy: 0.8785 - val_loss: 0.5987 - val_accuracy: 0.7912\n","Epoch 38/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.4400 - accuracy: 0.8492 - val_loss: 0.5737 - val_accuracy: 0.7851\n","Epoch 39/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.3499 - accuracy: 0.8829 - val_loss: 0.8638 - val_accuracy: 0.6735\n","Epoch 40/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.3549 - accuracy: 0.8780 - val_loss: 0.5641 - val_accuracy: 0.8202\n","Epoch 41/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.4028 - accuracy: 0.8658 - val_loss: 0.5948 - val_accuracy: 0.7781\n","Epoch 42/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.3409 - accuracy: 0.8836 - val_loss: 0.4749 - val_accuracy: 0.8385\n","Epoch 43/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.3645 - accuracy: 0.8777 - val_loss: 0.4497 - val_accuracy: 0.8492\n","Epoch 44/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.3434 - accuracy: 0.8850 - val_loss: 0.4393 - val_accuracy: 0.8486\n","Epoch 45/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.3358 - accuracy: 0.8848 - val_loss: 0.4144 - val_accuracy: 0.8594\n","Epoch 46/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.3624 - accuracy: 0.8799 - val_loss: 0.5768 - val_accuracy: 0.7934\n","Epoch 47/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.3067 - accuracy: 0.8968 - val_loss: 0.4588 - val_accuracy: 0.8495\n","Epoch 48/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2931 - accuracy: 0.9037 - val_loss: 0.4170 - val_accuracy: 0.8611\n","Epoch 49/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2859 - accuracy: 0.9048 - val_loss: 0.3920 - val_accuracy: 0.8642\n","Epoch 50/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.3296 - accuracy: 0.8888 - val_loss: 0.3823 - val_accuracy: 0.8707\n","Epoch 51/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2738 - accuracy: 0.9084 - val_loss: 0.4575 - val_accuracy: 0.8416\n","Epoch 52/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.3492 - accuracy: 0.8828 - val_loss: 0.7545 - val_accuracy: 0.8231\n","Epoch 53/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.3385 - accuracy: 0.8882 - val_loss: 0.6792 - val_accuracy: 0.7913\n","Epoch 54/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.3446 - accuracy: 0.8853 - val_loss: 0.7783 - val_accuracy: 0.7706\n","Epoch 55/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2914 - accuracy: 0.9022 - val_loss: 0.4328 - val_accuracy: 0.8566\n","Epoch 56/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2855 - accuracy: 0.9065 - val_loss: 0.4057 - val_accuracy: 0.8685\n","Epoch 57/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2664 - accuracy: 0.9132 - val_loss: 0.4057 - val_accuracy: 0.8605\n","Epoch 58/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.2758 - accuracy: 0.9084 - val_loss: 0.4722 - val_accuracy: 0.8381\n","Epoch 59/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2876 - accuracy: 0.9028 - val_loss: 0.3579 - val_accuracy: 0.8813\n","Epoch 60/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2636 - accuracy: 0.9107 - val_loss: 0.3667 - val_accuracy: 0.8777\n","Epoch 61/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2572 - accuracy: 0.9138 - val_loss: 0.3887 - val_accuracy: 0.8685\n","Epoch 62/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2497 - accuracy: 0.9166 - val_loss: 0.3416 - val_accuracy: 0.8860\n","Epoch 63/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2543 - accuracy: 0.9144 - val_loss: 0.3340 - val_accuracy: 0.8881\n","Epoch 64/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2326 - accuracy: 0.9229 - val_loss: 0.3298 - val_accuracy: 0.8921\n","Epoch 65/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2121 - accuracy: 0.9289 - val_loss: 0.4091 - val_accuracy: 0.8621\n","Epoch 66/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2198 - accuracy: 0.9267 - val_loss: 0.2988 - val_accuracy: 0.9002\n","Epoch 67/100\n","16/16 [==============================] - 4s 240ms/step - loss: 0.2236 - accuracy: 0.9246 - val_loss: 0.3224 - val_accuracy: 0.8923\n","Epoch 68/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2197 - accuracy: 0.9261 - val_loss: 0.3051 - val_accuracy: 0.8977\n","Epoch 69/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2220 - accuracy: 0.9256 - val_loss: 0.3060 - val_accuracy: 0.8985\n","Epoch 70/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2225 - accuracy: 0.9243 - val_loss: 0.3148 - val_accuracy: 0.8958\n","Epoch 71/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2253 - accuracy: 0.9237 - val_loss: 0.3615 - val_accuracy: 0.8771\n","Epoch 72/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2145 - accuracy: 0.9283 - val_loss: 0.3087 - val_accuracy: 0.8973\n","Epoch 73/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1794 - accuracy: 0.9421 - val_loss: 0.2909 - val_accuracy: 0.9043\n","Epoch 74/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1959 - accuracy: 0.9356 - val_loss: 0.2775 - val_accuracy: 0.9090\n","Epoch 75/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2258 - accuracy: 0.9240 - val_loss: 0.2994 - val_accuracy: 0.9020\n","Epoch 76/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2014 - accuracy: 0.9330 - val_loss: 0.3156 - val_accuracy: 0.8962\n","Epoch 77/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2200 - accuracy: 0.9259 - val_loss: 0.3190 - val_accuracy: 0.8925\n","Epoch 78/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1813 - accuracy: 0.9382 - val_loss: 0.2683 - val_accuracy: 0.9113\n","Epoch 79/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.2155 - accuracy: 0.9284 - val_loss: 0.2578 - val_accuracy: 0.9156\n","Epoch 80/100\n","16/16 [==============================] - 4s 232ms/step - loss: 0.1712 - accuracy: 0.9429 - val_loss: 0.2495 - val_accuracy: 0.9182\n","Epoch 81/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1644 - accuracy: 0.9448 - val_loss: 0.2816 - val_accuracy: 0.9090\n","Epoch 82/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1765 - accuracy: 0.9406 - val_loss: 0.2506 - val_accuracy: 0.9179\n","Epoch 83/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1605 - accuracy: 0.9466 - val_loss: 0.2593 - val_accuracy: 0.9131\n","Epoch 84/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1766 - accuracy: 0.9409 - val_loss: 0.2341 - val_accuracy: 0.9237\n","Epoch 85/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1782 - accuracy: 0.9407 - val_loss: 0.2301 - val_accuracy: 0.9237\n","Epoch 86/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1515 - accuracy: 0.9484 - val_loss: 0.2439 - val_accuracy: 0.9193\n","Epoch 87/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1641 - accuracy: 0.9441 - val_loss: 0.2334 - val_accuracy: 0.9226\n","Epoch 88/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1517 - accuracy: 0.9488 - val_loss: 0.2276 - val_accuracy: 0.9259\n","Epoch 89/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1482 - accuracy: 0.9498 - val_loss: 0.2175 - val_accuracy: 0.9286\n","Epoch 90/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1568 - accuracy: 0.9476 - val_loss: 0.2540 - val_accuracy: 0.9175\n","Epoch 91/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1563 - accuracy: 0.9480 - val_loss: 0.2161 - val_accuracy: 0.9292\n","Epoch 92/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1553 - accuracy: 0.9477 - val_loss: 0.2570 - val_accuracy: 0.9172\n","Epoch 93/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1721 - accuracy: 0.9428 - val_loss: 0.2565 - val_accuracy: 0.9145\n","Epoch 94/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1782 - accuracy: 0.9418 - val_loss: 0.3762 - val_accuracy: 0.8814\n","Epoch 95/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2100 - accuracy: 0.9286 - val_loss: 0.3144 - val_accuracy: 0.8953\n","Epoch 96/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.2254 - accuracy: 0.9244 - val_loss: 0.5282 - val_accuracy: 0.8548\n","Epoch 97/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1922 - accuracy: 0.9377 - val_loss: 0.2947 - val_accuracy: 0.9082\n","Epoch 98/100\n","16/16 [==============================] - 4s 233ms/step - loss: 0.1876 - accuracy: 0.9374 - val_loss: 0.2342 - val_accuracy: 0.9251\n","Epoch 99/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1656 - accuracy: 0.9444 - val_loss: 0.2162 - val_accuracy: 0.9305\n","Epoch 100/100\n","16/16 [==============================] - 4s 234ms/step - loss: 0.1401 - accuracy: 0.9529 - val_loss: 0.2024 - val_accuracy: 0.9344\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f8adc5d5d68>"]},"metadata":{"tags":[]},"execution_count":47}]},{"cell_type":"code","metadata":{"id":"KQVTxjQO0Kgx"},"source":[""],"execution_count":null,"outputs":[]}]}